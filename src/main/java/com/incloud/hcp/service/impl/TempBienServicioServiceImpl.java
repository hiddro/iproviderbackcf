/*
 * Project home: https://github.com/jaxio/celerio-angular-quickstart
 * 
 * Source code generated by Celerio, an Open Source code generator by Jaxio.
 * Documentation: http://www.jaxio.com/documentation/celerio/
 * Source code: https://github.com/jaxio/celerio/
 * Follow us on twitter: @jaxiosoft
 * This header can be customized in Celerio conf...
 * Template pack-angular:src/main/java/dto/EntityDTOService.java.e.vm
 */
package com.incloud.hcp.service.impl;

import com.incloud.hcp.config.excel.ExcelDefault;
import com.incloud.hcp.domain.TempBienServicio;
import com.incloud.hcp.domain.TempBienServicio_;
import com.incloud.hcp.repository.TempBienServicioRepository;
import com.incloud.hcp.service.TempBienServicioService;
import com.incloud.hcp.service.support.PageRequestByExample;
import com.incloud.hcp.service.support.PageResponse;
import org.apache.commons.lang.StringUtils;
import org.apache.poi.ss.usermodel.CellStyle;
import org.apache.poi.ss.usermodel.DataFormat;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.xssf.streaming.SXSSFSheet;
import org.apache.poi.xssf.streaming.SXSSFWorkbook;
import org.apache.poi.xssf.usermodel.XSSFCellStyle;
import org.apache.poi.xssf.usermodel.XSSFRow;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.MessageSource;
import org.springframework.data.domain.Example;
import org.springframework.data.domain.ExampleMatcher;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Sort;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Propagation;
import org.springframework.transaction.annotation.Transactional;

import java.awt.*;
import java.math.BigDecimal;
import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

/**
 * A simple DTO Facility for TempBienServicio.
 */
@Service
@Transactional(propagation = Propagation.REQUIRED, rollbackFor = Exception.class)
public abstract class TempBienServicioServiceImpl implements TempBienServicioService {

    protected final Logger log = LoggerFactory.getLogger(TempBienServicioServiceImpl.class);

    protected final String NAME_SHEET = "TempBienServicio";
    protected final String CONFIG_TITLE = "com/incloud/hcp/excel/TempBienServicioExcel.xml";

    @Autowired
    protected MessageSource messageSource;

    @Autowired
    protected TempBienServicioRepository tempBienServicioRepository;

    @Transactional(readOnly = true)
    public Optional<TempBienServicio> findOne(Integer id) {
        log.debug("Ingresando findOne: ", id);
        return this.tempBienServicioRepository.findById(id);
    }

    @Transactional(readOnly = true)
    public List<TempBienServicio> findAll() {
        log.debug("Ingresando findAll");
        Sort sort = Sort.by("id");
        sort = this.setFindAll(sort);
        List<TempBienServicio> lista = this.tempBienServicioRepository.findAll(sort);
        return lista;
    }

    protected abstract Sort setFindAll(Sort sort);

    @Transactional(readOnly = true)
    public List<TempBienServicio> find(TempBienServicio req) {
        log.debug("Ingresando find: ", req);
        Example<TempBienServicio> example = null;
        TempBienServicio tempBienServicio = req;
        ExampleMatcher matcher = null;
        if (tempBienServicio != null) {
            matcher = ExampleMatcher.matching() //
                    .withMatcher(TempBienServicio_.codigoSap.getName(), match -> match.ignoreCase().startsWith())
                    .withMatcher(TempBienServicio_.descripcion.getName(), match -> match.ignoreCase().startsWith())
                    .withMatcher(TempBienServicio_.numeroParte.getName(), match -> match.ignoreCase().startsWith())
                    .withMatcher(TempBienServicio_.tipoItem.getName(), match -> match.ignoreCase().startsWith())
                    .withMatcher(TempBienServicio_.descripcionLarga.getName(), match -> match.ignoreCase().startsWith());
            example = Example.of(tempBienServicio, matcher);
        }
        Sort sort = Sort.by("id");
        sort = this.setFind(req, matcher, example, sort);
        List<TempBienServicio> lista = this.tempBienServicioRepository.findAll(example, sort);
        return lista;
    }

    protected abstract Sort setFind(TempBienServicio req, ExampleMatcher matcher, Example<TempBienServicio> example, Sort sort);

    @Transactional(readOnly = true)
    public PageResponse<TempBienServicio> findPaginated(PageRequestByExample<TempBienServicio> req) {
        log.debug("Ingresando findPaginated: ", req);
        Example<TempBienServicio> example = null;
        TempBienServicio tempBienServicio = toEntity(req.example);
        ExampleMatcher matcher = null;
        if (tempBienServicio != null) {
            matcher = ExampleMatcher.matching() //
                    .withMatcher(TempBienServicio_.codigoSap.getName(), match -> match.ignoreCase().startsWith())
                    .withMatcher(TempBienServicio_.descripcion.getName(), match -> match.ignoreCase().startsWith())
                    .withMatcher(TempBienServicio_.numeroParte.getName(), match -> match.ignoreCase().startsWith())
                    .withMatcher(TempBienServicio_.tipoItem.getName(), match -> match.ignoreCase().startsWith())
                    .withMatcher(TempBienServicio_.descripcionLarga.getName(), match -> match.ignoreCase().startsWith());
            example = Example.of(tempBienServicio, matcher);
        }

        Page<TempBienServicio> page;
        Sort sort = Sort.by("id");
        sort = this.setFind(tempBienServicio, matcher, example, sort);
        req.generarLazyDefecto();
        this.setFindPaginated(req, matcher, example);
        if (example != null) {
            page = this.tempBienServicioRepository.findAll(example, req.toPageable(sort));
        } else {
            page = this.tempBienServicioRepository.findAll(req.toPageable(sort));
        }

        List<TempBienServicio> content = page.getContent().stream().map(this::toDTO).collect(Collectors.toList());
        return new PageResponse<>(page.getTotalPages(), page.getTotalElements(), content);
    }

    protected abstract void setFindPaginated(PageRequestByExample<TempBienServicio> req, ExampleMatcher matcher, Example<TempBienServicio> example);

    @Transactional(readOnly = true)
    public XSSFWorkbook downloadExcelXLSX(TempBienServicio req) {
        log.debug("Ingresando downloadExcelXLSX: ", req);
        List<TempBienServicio> lista = this.find(req);
        Optional<List<TempBienServicio>> oList = Optional.ofNullable(lista);
        if (!oList.isPresent()) {
            return null;
        }

        XSSFWorkbook book = new XSSFWorkbook();
        XSSFSheet sheet = book.createSheet();
        int numberOfSheets = book.getNumberOfSheets();
        book.setSheetName(numberOfSheets - 1, NAME_SHEET);
        ExcelDefault.createTitle(sheet, CONFIG_TITLE, book.createCellStyle(), book.createFont());
        CellStyle cellStyle = book.createCellStyle();
        DataFormat dataFormat = book.createDataFormat();

        lista.forEach(tempBienServicio -> {
            int lastRow = sheet.getLastRowNum();
            int i = lastRow < 0 ? 0 : lastRow;
            XSSFRow dataRow = sheet.createRow(i + 1);
            int contador = 0;
            ExcelDefault.setValueCell(tempBienServicio.getId(), dataRow.createCell(contador), cellStyle, dataFormat);
            contador++;
            ExcelDefault.setValueCell(tempBienServicio.getCodigoSap(), dataRow.createCell(contador), cellStyle, dataFormat);
            contador++;
            ExcelDefault.setValueCell(tempBienServicio.getDescripcion(), dataRow.createCell(contador), cellStyle, dataFormat);
            contador++;
            ExcelDefault.setValueCell(tempBienServicio.getNumeroParte(), dataRow.createCell(contador), cellStyle, dataFormat);
            contador++;
            ExcelDefault.setValueCell(tempBienServicio.getTipoItem(), dataRow.createCell(contador), cellStyle, dataFormat);
            contador++;
            ExcelDefault.setValueCell(tempBienServicio.getCodigoRubroSap(), dataRow.createCell(contador), cellStyle, dataFormat);
            contador++;
            ExcelDefault.setValueCell(tempBienServicio.getCodigoUnidadMedidaSap(), dataRow.createCell(contador), cellStyle, dataFormat);
            contador++;
            ExcelDefault.setValueCell(tempBienServicio.getDescripcionLarga(), dataRow.createCell(contador), cellStyle, dataFormat);
            contador++;
            /* Agregar aqui si desean colocar mas campos del BEAN */
            this.setDownloadExcelItem(tempBienServicio, dataRow);

        });
        this.setDownloadExcel(sheet);
        int totalColumn = sheet.getRow(0).getLastCellNum();
        for (int i = 0; i < totalColumn; i++) {
            sheet.autoSizeColumn(i, true);
        }
        return book;
    }

    protected void setDownloadExcelItem(TempBienServicio bean, XSSFRow dataRow) {

    }

    protected void setDownloadExcel(XSSFSheet sheet) {

    }

    @Transactional(readOnly = true)
    public SXSSFWorkbook downloadExcelSXLSX(TempBienServicio req) {
        log.debug("Ingresando downloadExcelSXLSX: ", req);
        List<TempBienServicio> lista = this.find(req);
        Optional<List<TempBienServicio>> oList = Optional.ofNullable(lista);
        if (!oList.isPresent()) {
            return null;
        }

        SXSSFWorkbook book = new SXSSFWorkbook(100);
        XSSFWorkbook xbook = book.getXSSFWorkbook();
        SXSSFSheet sheet = book.createSheet();
        sheet.trackAllColumnsForAutoSizing();
        int numberOfSheets = book.getNumberOfSheets();
        book.setSheetName(numberOfSheets - 1, NAME_SHEET);
        int nroColumnas = ExcelDefault.createTitle(xbook, sheet, CONFIG_TITLE);
        for (int i = 0; i < nroColumnas; i++) {
            sheet.autoSizeColumn(i, true);
        }
        sheet.untrackAllColumnsForAutoSizing();

        XSSFCellStyle cellStyle01 = ExcelDefault.devuelveCellStyle(xbook, new Color(0, 0, 1), new Color(226, 239, 218), false, (short) 10);
        XSSFCellStyle cellStyle02 = ExcelDefault.devuelveCellStyle(xbook, new Color(0, 0, 192), new Color(255, 255, 255), false, (short) 10);
        List<CellStyle> cellStyleList = null;
        List<CellStyle> cellStyleList01 = ExcelDefault.generarCellStyle(xbook, cellStyle01);
        List<CellStyle> cellStyleList02 = ExcelDefault.generarCellStyle(xbook, cellStyle02);
        boolean filaImpar = true;

        for (TempBienServicio tempBienServicio : lista) {
            int lastRow = sheet.getLastRowNum();
            int i = lastRow < 0 ? 0 : lastRow;
            Row dataRow = sheet.createRow(i + 1);
            int contador = 0;
            if (filaImpar) {
                cellStyleList = cellStyleList01;
            } else {
                cellStyleList = cellStyleList02;
            }
            filaImpar = !filaImpar;

            ExcelDefault.setValueCell(tempBienServicio.getId(), dataRow.createCell(contador), "I", cellStyleList);
            contador++;
            ExcelDefault.setValueCell(tempBienServicio.getCodigoSap(), dataRow.createCell(contador), "S", cellStyleList);
            contador++;
            ExcelDefault.setValueCell(tempBienServicio.getDescripcion(), dataRow.createCell(contador), "S", cellStyleList);
            contador++;
            ExcelDefault.setValueCell(tempBienServicio.getNumeroParte(), dataRow.createCell(contador), "S", cellStyleList);
            contador++;
            ExcelDefault.setValueCell(tempBienServicio.getTipoItem(), dataRow.createCell(contador), "S", cellStyleList);
            contador++;
            ExcelDefault.setValueCell(tempBienServicio.getCodigoRubroSap(), dataRow.createCell(contador), "I", cellStyleList);
            contador++;
            ExcelDefault.setValueCell(tempBienServicio.getCodigoUnidadMedidaSap(), dataRow.createCell(contador), "I", cellStyleList);
            contador++;
            ExcelDefault.setValueCell(tempBienServicio.getDescripcionLarga(), dataRow.createCell(contador), "S", cellStyleList);
            contador++;
            /* Agregar aqui si desean colocar mas campos del BEAN */
            this.setDownloadExcelItem(tempBienServicio, dataRow);

        }
        this.setDownloadExcel(sheet);
        return book;
    }

    protected void setDownloadExcelItem(TempBienServicio bean, Row dataRow) {

    }

    protected void setDownloadExcel(Sheet sheet) {

    }

    @Transactional(readOnly = true)
    public SXSSFWorkbook generateInsertExcelSXLSX(TempBienServicio req) {
        log.debug("Ingresando generateInsertExcelSXLSX: ", req);
        List<TempBienServicio> lista = this.find(req);
        Optional<List<TempBienServicio>> oList = Optional.ofNullable(lista);
        if (!oList.isPresent()) {
            return null;
        }

        SXSSFWorkbook book = new SXSSFWorkbook(100);
        XSSFWorkbook xbook = book.getXSSFWorkbook();
        SXSSFSheet sheet = book.createSheet();
        sheet.trackAllColumnsForAutoSizing();
        int numberOfSheets = book.getNumberOfSheets();
        book.setSheetName(numberOfSheets - 1, NAME_SHEET);
        int nroColumnas = 1;
        for (int i = 0; i < nroColumnas; i++) {
            sheet.autoSizeColumn(i, true);
        }
        sheet.untrackAllColumnsForAutoSizing();
        XSSFCellStyle cellStyle01 = ExcelDefault.devuelveCellStyle(xbook, new Color(0, 0, 1), new Color(226, 239, 218), false, (short) 10);
        XSSFCellStyle cellStyle02 = ExcelDefault.devuelveCellStyle(xbook, new Color(0, 0, 192), new Color(255, 255, 255), false, (short) 10);
        List<CellStyle> cellStyleList = null;
        List<CellStyle> cellStyleList01 = ExcelDefault.generarCellStyle(xbook, cellStyle01);
        List<CellStyle> cellStyleList02 = ExcelDefault.generarCellStyle(xbook, cellStyle02);
        boolean filaImpar = true;

        for (TempBienServicio tempBienServicio : lista) {
            int lastRow = sheet.getLastRowNum();
            int i = lastRow < 0 ? 0 : lastRow;
            Row dataRow = sheet.createRow(i + 1);
            int contador = 0;
            if (filaImpar) {
                cellStyleList = cellStyleList01;
            } else {
                cellStyleList = cellStyleList02;
            }
            filaImpar = !filaImpar;
            String sqlInsert = "INSERT INTO temp_bien_servicio(";
            sqlInsert = sqlInsert + "id_bien_servicio" + ", ";
            sqlInsert = sqlInsert + "codigo_sap" + ", ";
            sqlInsert = sqlInsert + "descripcion" + ", ";
            sqlInsert = sqlInsert + "numero_parte" + ", ";
            sqlInsert = sqlInsert + "tipo_item" + ", ";
            sqlInsert = sqlInsert + "codigo_rubro_sap" + ", ";
            sqlInsert = sqlInsert + "codigo_unidad_medida_sap" + ", ";
            sqlInsert = sqlInsert + "descripcion_larga" + ")";
            sqlInsert = sqlInsert + " VALUES (";
            sqlInsert = sqlInsert + tempBienServicio.getId() + ", ";
            if (StringUtils.isBlank(tempBienServicio.getCodigoSap())) {
                sqlInsert = sqlInsert + "null" + ", ";
            } else {
                sqlInsert = sqlInsert + "'" + tempBienServicio.getCodigoSap() + "'" + ", ";
            }
            if (StringUtils.isBlank(tempBienServicio.getDescripcion())) {
                sqlInsert = sqlInsert + "null" + ", ";
            } else {
                sqlInsert = sqlInsert + "'" + tempBienServicio.getDescripcion() + "'" + ", ";
            }
            if (StringUtils.isBlank(tempBienServicio.getNumeroParte())) {
                sqlInsert = sqlInsert + "null" + ", ";
            } else {
                sqlInsert = sqlInsert + "'" + tempBienServicio.getNumeroParte() + "'" + ", ";
            }
            if (StringUtils.isBlank(tempBienServicio.getTipoItem())) {
                sqlInsert = sqlInsert + "null" + ", ";
            } else {
                sqlInsert = sqlInsert + "'" + tempBienServicio.getTipoItem() + "'" + ", ";
            }
            sqlInsert = sqlInsert + tempBienServicio.getCodigoRubroSap() + ", ";
            sqlInsert = sqlInsert + tempBienServicio.getCodigoUnidadMedidaSap() + ", ";
            if (StringUtils.isBlank(tempBienServicio.getDescripcionLarga())) {
                sqlInsert = sqlInsert + "null";
            } else {
                sqlInsert = sqlInsert + "'" + tempBienServicio.getDescripcionLarga() + "'";
            }
            sqlInsert = sqlInsert + " );";
            ExcelDefault.setValueCell(sqlInsert, dataRow.createCell(contador), "S", cellStyleList);
            contador++;
        }
        return book;
    }

    protected TempBienServicio completarDatosBean(TempBienServicio bean) {
        BigDecimal data = new BigDecimal(0.00);
        bean = this.setCompletarDatosBean(bean);
        return bean;
    }

    protected TempBienServicio setCompletarDatosBean(TempBienServicio bean) {
        return bean;
    }

    /**
     * Save the passed dto as a new entity or update the corresponding entity if any.
     */
    public TempBienServicio save(TempBienServicio dto) {
        log.debug("Ingresando save: ", dto);
        if (dto == null) {
            return null;
        }
        dto = this.completarDatosBean(dto);
        dto = this.setBeforeSave(dto);
        this.setSave(dto);
        dto = this.tempBienServicioRepository.save(dto);
        dto = this.setAfterSave(dto);
        return dto;
    }

    protected abstract void setSave(TempBienServicio dto);

    protected TempBienServicio setBeforeSave(TempBienServicio dto) {
        return dto;
    }

    protected TempBienServicio setAfterSave(TempBienServicio dto) {
        return dto;
    }

    /**
    * Save new entity or update the corresponding entity if any.
    */
    public TempBienServicio create(TempBienServicio dto) {
        log.debug("Ingresando create: ", dto);
        if (dto == null) {
            return null;
        }

        TempBienServicio tempBienServicio;
        tempBienServicio = new TempBienServicio();

        tempBienServicio.setCodigoSap(dto.getCodigoSap());
        tempBienServicio.setDescripcion(dto.getDescripcion());
        tempBienServicio.setNumeroParte(dto.getNumeroParte());
        tempBienServicio.setTipoItem(dto.getTipoItem());
        tempBienServicio.setCodigoRubroSap(dto.getCodigoRubroSap());
        tempBienServicio.setCodigoUnidadMedidaSap(dto.getCodigoUnidadMedidaSap());
        tempBienServicio.setDescripcionLarga(dto.getDescripcionLarga());
        tempBienServicio = this.completarDatosBean(tempBienServicio);
        this.setCreate(tempBienServicio);
        return this.tempBienServicioRepository.save(tempBienServicio);
    }

    protected abstract void setCreate(TempBienServicio dto);

    protected String validacionesPrevias(TempBienServicio dto) {
        return "";
    }

    /**
     * Delete the passed dto as a new entity or update the corresponding entity if any.
     */
    public void delete(Integer id) {
        log.debug("Ingresando delete: ", id);
        if (id == null) {
            return;
        }
        this.setDelete(id);
        this.tempBienServicioRepository.deleteById(id);
    }

    protected abstract void setDelete(Integer id);

    public void deleteAll() {
        log.debug("Ingresando deleteAll");
        this.setDeleteAll();
        this.tempBienServicioRepository.deleteAll();
    }

    protected abstract void setDeleteAll();

    /**
     * Converts the passed tempBienServicio to a DTO.
     */
    protected TempBienServicio toDTO(TempBienServicio tempBienServicio) {
        return tempBienServicio;
    }

    /**
     * Converts the passed dto to a TempBienServicio.
     * Convenient for query by example.
     */
    protected TempBienServicio toEntity(TempBienServicio dto) {
        return dto;
    }

}