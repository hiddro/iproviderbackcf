/*
 * Project home: https://github.com/jaxio/celerio-angular-quickstart
 * 
 * Source code generated by Celerio, an Open Source code generator by Jaxio.
 * Documentation: http://www.jaxio.com/documentation/celerio/
 * Source code: https://github.com/jaxio/celerio/
 * Follow us on twitter: @jaxiosoft
 * This header can be customized in Celerio conf...
 * Template pack-angular:src/main/java/dto/EntityDTOService.java.e.vm
 */
package com.incloud.hcp.service.impl;

import com.incloud.hcp.bean.CmisFile;
import com.incloud.hcp.config.excel.ExcelDefault;
import com.incloud.hcp.domain.*;
import com.incloud.hcp.myibatis.mapper.ParametroMapper;
import com.incloud.hcp.repository.LicitacionAdjuntoRespuestaRepository;
import com.incloud.hcp.repository.LicitacionProveedorRepository;
import com.incloud.hcp.repository.LicitacionRepository;
import com.incloud.hcp.service.CmisService;
import com.incloud.hcp.service.LicitacionAdjuntoRespuestaService;
import com.incloud.hcp.service.notificacion.EnvioRespuestaPreguntaLicitacionNotificacion;
import com.incloud.hcp.service.support.PageRequestByExample;
import com.incloud.hcp.service.support.PageResponse;
import com.incloud.hcp.util.Constant;
import org.apache.commons.lang.StringUtils;
import org.apache.poi.ss.usermodel.CellStyle;
import org.apache.poi.ss.usermodel.DataFormat;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.xssf.streaming.SXSSFSheet;
import org.apache.poi.xssf.streaming.SXSSFWorkbook;
import org.apache.poi.xssf.usermodel.XSSFCellStyle;
import org.apache.poi.xssf.usermodel.XSSFRow;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.MessageSource;
import org.springframework.data.domain.Example;
import org.springframework.data.domain.ExampleMatcher;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Sort;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Propagation;
import org.springframework.transaction.annotation.Transactional;

import java.awt.*;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

/**
 * A simple DTO Facility for LicitacionAdjuntoRespuesta.
 */
@Service
@Transactional(propagation = Propagation.REQUIRED, rollbackFor = Exception.class)
public abstract class LicitacionAdjuntoRespuestaServiceImpl implements LicitacionAdjuntoRespuestaService {

    protected final Logger log = LoggerFactory.getLogger(LicitacionAdjuntoRespuestaServiceImpl.class);

    protected final String NAME_SHEET = "LicitacionAdjuntoRespuesta";
    protected final String CONFIG_TITLE = "com/incloud/hcp/excel/LicitacionAdjuntoRespuestaExcel.xml";

    @Autowired
    protected MessageSource messageSource;

    @Autowired
    protected LicitacionAdjuntoRespuestaRepository licitacionAdjuntoRespuestaRepository;

    @Autowired
    protected LicitacionRepository licitacionRepository;

    @Autowired
    protected LicitacionProveedorRepository licitacionProveedorRepository;

    @Autowired
    protected EnvioRespuestaPreguntaLicitacionNotificacion envioRespuestaPreguntaLicitacionNotificacion;

    @Autowired
    private CmisService cmisService;

    @Autowired
    private ParametroMapper parametroMapper;

    @Transactional(readOnly = true)
    public Optional<LicitacionAdjuntoRespuesta> findOne(Integer id) {
        log.debug("Ingresando findOne: ", id);
        return this.licitacionAdjuntoRespuestaRepository.findById(id);
    }

    @Transactional(readOnly = true)
    public List<LicitacionAdjuntoRespuesta> findAll() {
        log.debug("Ingresando findAll");
        Sort sort = Sort.by("id");
        sort = this.setFindAll(sort);
        List<LicitacionAdjuntoRespuesta> lista = this.licitacionAdjuntoRespuestaRepository.findAll(sort);
        return lista;
    }

    protected abstract Sort setFindAll(Sort sort);

    @Transactional(readOnly = true)
    public List<LicitacionAdjuntoRespuesta> find(LicitacionAdjuntoRespuesta req) {
        log.debug("Ingresando find: ", req);
        Example<LicitacionAdjuntoRespuesta> example = null;
        LicitacionAdjuntoRespuesta licitacionAdjuntoRespuesta = req;
        ExampleMatcher matcher = null;
        if (licitacionAdjuntoRespuesta != null) {
            matcher = ExampleMatcher.matching() //
                    .withMatcher(LicitacionAdjuntoRespuesta_.archivoId.getName(), match -> match.ignoreCase().startsWith())
                    .withMatcher(LicitacionAdjuntoRespuesta_.archivoNombre.getName(), match -> match.ignoreCase().startsWith())
                    .withMatcher(LicitacionAdjuntoRespuesta_.archivoTipo.getName(), match -> match.ignoreCase().startsWith())
                    .withMatcher(LicitacionAdjuntoRespuesta_.descripcion.getName(), match -> match.ignoreCase().startsWith())
                    .withMatcher(LicitacionAdjuntoRespuesta_.rutaAdjunto.getName(), match -> match.ignoreCase().startsWith());
            example = Example.of(licitacionAdjuntoRespuesta, matcher);
        }
        Sort sort = Sort.by("id");
        sort = this.setFind(req, matcher, example, sort);
        List<LicitacionAdjuntoRespuesta> lista = this.licitacionAdjuntoRespuestaRepository.findAll(example, sort);
        return lista;
    }

    protected abstract Sort setFind(LicitacionAdjuntoRespuesta req, ExampleMatcher matcher, Example<LicitacionAdjuntoRespuesta> example, Sort sort);

    @Transactional(readOnly = true)
    public PageResponse<LicitacionAdjuntoRespuesta> findPaginated(PageRequestByExample<LicitacionAdjuntoRespuesta> req) {
        log.debug("Ingresando findPaginated: ", req);
        Example<LicitacionAdjuntoRespuesta> example = null;
        LicitacionAdjuntoRespuesta licitacionAdjuntoRespuesta = toEntity(req.example);
        ExampleMatcher matcher = null;
        if (licitacionAdjuntoRespuesta != null) {
            matcher = ExampleMatcher.matching() //
                    .withMatcher(LicitacionAdjuntoRespuesta_.archivoId.getName(), match -> match.ignoreCase().startsWith())
                    .withMatcher(LicitacionAdjuntoRespuesta_.archivoNombre.getName(), match -> match.ignoreCase().startsWith())
                    .withMatcher(LicitacionAdjuntoRespuesta_.archivoTipo.getName(), match -> match.ignoreCase().startsWith())
                    .withMatcher(LicitacionAdjuntoRespuesta_.descripcion.getName(), match -> match.ignoreCase().startsWith())
                    .withMatcher(LicitacionAdjuntoRespuesta_.rutaAdjunto.getName(), match -> match.ignoreCase().startsWith());
            example = Example.of(licitacionAdjuntoRespuesta, matcher);
        }

        Page<LicitacionAdjuntoRespuesta> page;
        Sort sort = Sort.by("id");
        sort = this.setFind(licitacionAdjuntoRespuesta, matcher, example, sort);
        req.generarLazyDefecto();
        this.setFindPaginated(req, matcher, example);
        if (example != null) {
            page = this.licitacionAdjuntoRespuestaRepository.findAll(example, req.toPageable(sort));
        } else {
            page = this.licitacionAdjuntoRespuestaRepository.findAll(req.toPageable(sort));
        }

        List<LicitacionAdjuntoRespuesta> content = page.getContent().stream().map(this::toDTO).collect(Collectors.toList());
        return new PageResponse<>(page.getTotalPages(), page.getTotalElements(), content);
    }

    protected abstract void setFindPaginated(PageRequestByExample<LicitacionAdjuntoRespuesta> req, ExampleMatcher matcher,
            Example<LicitacionAdjuntoRespuesta> example);

    @Transactional(readOnly = true)
    public XSSFWorkbook downloadExcelXLSX(LicitacionAdjuntoRespuesta req) {
        log.debug("Ingresando downloadExcelXLSX: ", req);
        List<LicitacionAdjuntoRespuesta> lista = this.find(req);
        Optional<List<LicitacionAdjuntoRespuesta>> oList = Optional.ofNullable(lista);
        if (!oList.isPresent()) {
            return null;
        }

        XSSFWorkbook book = new XSSFWorkbook();
        XSSFSheet sheet = book.createSheet();
        int numberOfSheets = book.getNumberOfSheets();
        book.setSheetName(numberOfSheets - 1, NAME_SHEET);
        ExcelDefault.createTitle(sheet, CONFIG_TITLE, book.createCellStyle(), book.createFont());
        CellStyle cellStyle = book.createCellStyle();
        DataFormat dataFormat = book.createDataFormat();

        lista.forEach(licitacionAdjuntoRespuesta -> {
            int lastRow = sheet.getLastRowNum();
            int i = lastRow < 0 ? 0 : lastRow;
            XSSFRow dataRow = sheet.createRow(i + 1);
            int contador = 0;
            ExcelDefault.setValueCell(licitacionAdjuntoRespuesta.getId(), dataRow.createCell(contador), cellStyle, dataFormat);
            contador++;
            ExcelDefault.setValueCell(licitacionAdjuntoRespuesta.getIdLicitacion(), dataRow.createCell(contador), cellStyle, dataFormat);
            contador++;
            ExcelDefault.setValueCell(licitacionAdjuntoRespuesta.getArchivoId(), dataRow.createCell(contador), cellStyle, dataFormat);
            contador++;
            ExcelDefault.setValueCell(licitacionAdjuntoRespuesta.getArchivoNombre(), dataRow.createCell(contador), cellStyle, dataFormat);
            contador++;
            ExcelDefault.setValueCell(licitacionAdjuntoRespuesta.getArchivoTipo(), dataRow.createCell(contador), cellStyle, dataFormat);
            contador++;
            ExcelDefault.setValueCell(licitacionAdjuntoRespuesta.getDescripcion(), dataRow.createCell(contador), cellStyle, dataFormat);
            contador++;
            ExcelDefault.setValueCell(licitacionAdjuntoRespuesta.getRutaAdjunto(), dataRow.createCell(contador), cellStyle, dataFormat);
            contador++;
            /* Agregar aqui si desean colocar mas campos del BEAN */
            this.setDownloadExcelItem(licitacionAdjuntoRespuesta, dataRow);

        });
        this.setDownloadExcel(sheet);
        int totalColumn = sheet.getRow(0).getLastCellNum();
        for (int i = 0; i < totalColumn; i++) {
            sheet.autoSizeColumn(i, true);
        }
        return book;
    }

    protected void setDownloadExcelItem(LicitacionAdjuntoRespuesta bean, XSSFRow dataRow) {

    }

    protected void setDownloadExcel(XSSFSheet sheet) {

    }

    @Transactional(readOnly = true)
    public SXSSFWorkbook downloadExcelSXLSX(LicitacionAdjuntoRespuesta req) {
        log.debug("Ingresando downloadExcelSXLSX: ", req);
        List<LicitacionAdjuntoRespuesta> lista = this.find(req);
        Optional<List<LicitacionAdjuntoRespuesta>> oList = Optional.ofNullable(lista);
        if (!oList.isPresent()) {
            return null;
        }

        SXSSFWorkbook book = new SXSSFWorkbook(100);
        XSSFWorkbook xbook = book.getXSSFWorkbook();
        SXSSFSheet sheet = book.createSheet();
        sheet.trackAllColumnsForAutoSizing();
        int numberOfSheets = book.getNumberOfSheets();
        book.setSheetName(numberOfSheets - 1, NAME_SHEET);
        int nroColumnas = ExcelDefault.createTitle(xbook, sheet, CONFIG_TITLE);
        for (int i = 0; i < nroColumnas; i++) {
            sheet.autoSizeColumn(i, true);
        }
        sheet.untrackAllColumnsForAutoSizing();

        XSSFCellStyle cellStyle01 = ExcelDefault.devuelveCellStyle(xbook, new Color(0, 0, 1), new Color(226, 239, 218), false, (short) 10);
        XSSFCellStyle cellStyle02 = ExcelDefault.devuelveCellStyle(xbook, new Color(0, 0, 192), new Color(255, 255, 255), false, (short) 10);
        List<CellStyle> cellStyleList = null;
        List<CellStyle> cellStyleList01 = ExcelDefault.generarCellStyle(xbook, cellStyle01);
        List<CellStyle> cellStyleList02 = ExcelDefault.generarCellStyle(xbook, cellStyle02);
        boolean filaImpar = true;

        for (LicitacionAdjuntoRespuesta licitacionAdjuntoRespuesta : lista) {
            int lastRow = sheet.getLastRowNum();
            int i = lastRow < 0 ? 0 : lastRow;
            Row dataRow = sheet.createRow(i + 1);
            int contador = 0;
            if (filaImpar) {
                cellStyleList = cellStyleList01;
            } else {
                cellStyleList = cellStyleList02;
            }
            filaImpar = !filaImpar;

            ExcelDefault.setValueCell(licitacionAdjuntoRespuesta.getId(), dataRow.createCell(contador), "I", cellStyleList);
            contador++;
            ExcelDefault.setValueCell(licitacionAdjuntoRespuesta.getIdLicitacion(), dataRow.createCell(contador), "I", cellStyleList);
            contador++;
            ExcelDefault.setValueCell(licitacionAdjuntoRespuesta.getArchivoId(), dataRow.createCell(contador), "S", cellStyleList);
            contador++;
            ExcelDefault.setValueCell(licitacionAdjuntoRespuesta.getArchivoNombre(), dataRow.createCell(contador), "S", cellStyleList);
            contador++;
            ExcelDefault.setValueCell(licitacionAdjuntoRespuesta.getArchivoTipo(), dataRow.createCell(contador), "S", cellStyleList);
            contador++;
            ExcelDefault.setValueCell(licitacionAdjuntoRespuesta.getDescripcion(), dataRow.createCell(contador), "S", cellStyleList);
            contador++;
            ExcelDefault.setValueCell(licitacionAdjuntoRespuesta.getRutaAdjunto(), dataRow.createCell(contador), "S", cellStyleList);
            contador++;
            /* Agregar aqui si desean colocar mas campos del BEAN */
            this.setDownloadExcelItem(licitacionAdjuntoRespuesta, dataRow);

        }
        this.setDownloadExcel(sheet);
        return book;
    }

    protected void setDownloadExcelItem(LicitacionAdjuntoRespuesta bean, Row dataRow) {

    }

    protected void setDownloadExcel(Sheet sheet) {

    }

    @Transactional(readOnly = true)
    public SXSSFWorkbook generateInsertExcelSXLSX(LicitacionAdjuntoRespuesta req) {
        log.debug("Ingresando generateInsertExcelSXLSX: ", req);
        List<LicitacionAdjuntoRespuesta> lista = this.find(req);
        Optional<List<LicitacionAdjuntoRespuesta>> oList = Optional.ofNullable(lista);
        if (!oList.isPresent()) {
            return null;
        }

        SXSSFWorkbook book = new SXSSFWorkbook(100);
        XSSFWorkbook xbook = book.getXSSFWorkbook();
        SXSSFSheet sheet = book.createSheet();
        sheet.trackAllColumnsForAutoSizing();
        int numberOfSheets = book.getNumberOfSheets();
        book.setSheetName(numberOfSheets - 1, NAME_SHEET);
        int nroColumnas = 1;
        for (int i = 0; i < nroColumnas; i++) {
            sheet.autoSizeColumn(i, true);
        }
        sheet.untrackAllColumnsForAutoSizing();
        XSSFCellStyle cellStyle01 = ExcelDefault.devuelveCellStyle(xbook, new Color(0, 0, 1), new Color(226, 239, 218), false, (short) 10);
        XSSFCellStyle cellStyle02 = ExcelDefault.devuelveCellStyle(xbook, new Color(0, 0, 192), new Color(255, 255, 255), false, (short) 10);
        List<CellStyle> cellStyleList = null;
        List<CellStyle> cellStyleList01 = ExcelDefault.generarCellStyle(xbook, cellStyle01);
        List<CellStyle> cellStyleList02 = ExcelDefault.generarCellStyle(xbook, cellStyle02);
        boolean filaImpar = true;

        for (LicitacionAdjuntoRespuesta licitacionAdjuntoRespuesta : lista) {
            int lastRow = sheet.getLastRowNum();
            int i = lastRow < 0 ? 0 : lastRow;
            Row dataRow = sheet.createRow(i + 1);
            int contador = 0;
            if (filaImpar) {
                cellStyleList = cellStyleList01;
            } else {
                cellStyleList = cellStyleList02;
            }
            filaImpar = !filaImpar;
            String sqlInsert = "INSERT INTO licitacion_adjunto_respuesta(";
            sqlInsert = sqlInsert + "id_licitacion_adjunto_respuesta" + ", ";
            sqlInsert = sqlInsert + "id_licitacion" + ", ";
            sqlInsert = sqlInsert + "archivo_id" + ", ";
            sqlInsert = sqlInsert + "archivo_nombre" + ", ";
            sqlInsert = sqlInsert + "archivo_tipo" + ", ";
            sqlInsert = sqlInsert + "descripcion" + ", ";
            sqlInsert = sqlInsert + "ruta_adjunto" + ")";
            sqlInsert = sqlInsert + " VALUES (";
            sqlInsert = sqlInsert + licitacionAdjuntoRespuesta.getId() + ", ";
            sqlInsert = sqlInsert + licitacionAdjuntoRespuesta.getIdLicitacion() + ", ";
            if (StringUtils.isBlank(licitacionAdjuntoRespuesta.getArchivoId())) {
                sqlInsert = sqlInsert + "null" + ", ";
            } else {
                sqlInsert = sqlInsert + "'" + licitacionAdjuntoRespuesta.getArchivoId() + "'" + ", ";
            }
            if (StringUtils.isBlank(licitacionAdjuntoRespuesta.getArchivoNombre())) {
                sqlInsert = sqlInsert + "null" + ", ";
            } else {
                sqlInsert = sqlInsert + "'" + licitacionAdjuntoRespuesta.getArchivoNombre() + "'" + ", ";
            }
            if (StringUtils.isBlank(licitacionAdjuntoRespuesta.getArchivoTipo())) {
                sqlInsert = sqlInsert + "null" + ", ";
            } else {
                sqlInsert = sqlInsert + "'" + licitacionAdjuntoRespuesta.getArchivoTipo() + "'" + ", ";
            }
            if (StringUtils.isBlank(licitacionAdjuntoRespuesta.getDescripcion())) {
                sqlInsert = sqlInsert + "null" + ", ";
            } else {
                sqlInsert = sqlInsert + "'" + licitacionAdjuntoRespuesta.getDescripcion() + "'" + ", ";
            }
            if (StringUtils.isBlank(licitacionAdjuntoRespuesta.getRutaAdjunto())) {
                sqlInsert = sqlInsert + "null";
            } else {
                sqlInsert = sqlInsert + "'" + licitacionAdjuntoRespuesta.getRutaAdjunto() + "'";
            }
            sqlInsert = sqlInsert + " );";
            ExcelDefault.setValueCell(sqlInsert, dataRow.createCell(contador), "S", cellStyleList);
            contador++;
        }
        return book;
    }

    protected LicitacionAdjuntoRespuesta completarDatosBean(LicitacionAdjuntoRespuesta bean) {
        BigDecimal data = new BigDecimal(0.00);
        bean = this.setCompletarDatosBean(bean);
        return bean;
    }

    protected LicitacionAdjuntoRespuesta setCompletarDatosBean(LicitacionAdjuntoRespuesta bean) {
        return bean;
    }

    /**
     * Save the passed dto as a new entity or update the corresponding entity if any.
     */
    public LicitacionAdjuntoRespuesta save(LicitacionAdjuntoRespuesta dto) {
        log.debug("Ingresando save: ", dto);
        if (dto == null) {
            return null;
        }
        dto = this.completarDatosBean(dto);
        dto = this.setBeforeSave(dto);
        this.setSave(dto);
        dto = this.licitacionAdjuntoRespuestaRepository.save(dto);
        dto = this.setAfterSave(dto);
        return dto;
    }

    protected abstract void setSave(LicitacionAdjuntoRespuesta dto);

    protected LicitacionAdjuntoRespuesta setBeforeSave(LicitacionAdjuntoRespuesta dto) {
        return dto;
    }

    protected LicitacionAdjuntoRespuesta setAfterSave(LicitacionAdjuntoRespuesta dto) {
        return dto;
    }

    /**
    * Save new entity or update the corresponding entity if any.
    */
    public LicitacionAdjuntoRespuesta create(LicitacionAdjuntoRespuesta dto) {
        log.debug("Ingresando create: ", dto);
        if (dto == null) {
            return null;
        }

        LicitacionAdjuntoRespuesta licitacionAdjuntoRespuesta;
        licitacionAdjuntoRespuesta = new LicitacionAdjuntoRespuesta();

        licitacionAdjuntoRespuesta.setIdLicitacion(dto.getIdLicitacion());
        licitacionAdjuntoRespuesta.setArchivoId(dto.getArchivoId());
        licitacionAdjuntoRespuesta.setArchivoNombre(dto.getArchivoNombre());
        licitacionAdjuntoRespuesta.setArchivoTipo(dto.getArchivoTipo());
        licitacionAdjuntoRespuesta.setDescripcion(dto.getDescripcion());
        licitacionAdjuntoRespuesta.setRutaAdjunto(dto.getRutaAdjunto());
        licitacionAdjuntoRespuesta = this.completarDatosBean(licitacionAdjuntoRespuesta);
        this.setCreate(licitacionAdjuntoRespuesta);
        return this.licitacionAdjuntoRespuestaRepository.save(licitacionAdjuntoRespuesta);
    }

    protected abstract void setCreate(LicitacionAdjuntoRespuesta dto);

    protected String validacionesPrevias(LicitacionAdjuntoRespuesta dto) {
        return "";
    }

    /**
     * Delete the passed dto as a new entity or update the corresponding entity if any.
     */
    public void delete(Integer id) {
        log.debug("Ingresando delete: ", id);
        if (id == null) {
            return;
        }
        this.setDelete(id);
        this.licitacionAdjuntoRespuestaRepository.deleteById(id);
    }

    protected abstract void setDelete(Integer id);

    public void deleteAll() {
        log.debug("Ingresando deleteAll");
        this.setDeleteAll();
        this.licitacionAdjuntoRespuestaRepository.deleteAll();
    }

    protected abstract void setDeleteAll();

    /**
     * Converts the passed licitacionAdjuntoRespuesta to a DTO.
     */
    protected LicitacionAdjuntoRespuesta toDTO(LicitacionAdjuntoRespuesta licitacionAdjuntoRespuesta) {
        return licitacionAdjuntoRespuesta;
    }

    /**
     * Converts the passed dto to a LicitacionAdjuntoRespuesta.
     * Convenient for query by example.
     */
    protected LicitacionAdjuntoRespuesta toEntity(LicitacionAdjuntoRespuesta dto) {
        return dto;
    }

    @Transactional(readOnly = true)
    @Override
    public List<LicitacionAdjuntoRespuesta> guardarAdjuntoLicitacion(List<LicitacionAdjuntoRespuesta> listAdjunto){

        //Creo una segunda lista con los adjuntos no guardados
        List<CmisFile> listAdjuntoNew = new ArrayList<CmisFile>();
        log.error("listAdjunto size: " + listAdjunto.size());
        if (listAdjunto.size() > 0) {
            listAdjunto.forEach(item -> {
                if (item.getId() == null) {
                    listAdjuntoNew.add(new CmisFile(item.getArchivoId(), item.getArchivoNombre(), item.getRutaAdjunto(), item.getArchivoTipo()));
                }
            });
        }
        log.error("listAdjuntoNew size: " + listAdjuntoNew.size());

        //Se crea folder destino -> Nro de licitacion
        Integer idLicitacion=listAdjunto.get(0).getIdLicitacion();
        log.error("idLicitacion: " + idLicitacion);
        String newFolder = idLicitacion + "LicitacionAdjuntoRespuesta";

        String folderId = cmisService.createFolder(newFolder);
        log.error("FOLDER_DESTINO: " + folderId);

        //Se mueven los adjuntos al folder destino y se obtiene la lista de los mismos con su nuevo URL
        Optional<List<CmisFile>> listAdjuntoToMove = Optional.ofNullable(listAdjuntoNew)
                .map(list -> {
                    log.error("Actualizando la version de los archivos adjuntos");
                    return cmisService.updateFileAndMoveVerificar(listAdjuntoNew, folderId);
                });


        //Se guardan en la base de datos los adjuntos movidos
        List<LicitacionAdjuntoRespuesta> listAdjuntoMoved = new ArrayList<>();
        if(listAdjuntoToMove.isPresent()){
            List<CmisFile> list = listAdjuntoToMove.get();
            log.error("listAdjuntoToMove size: " + list.size());
            list.forEach(file->{
                LicitacionAdjuntoRespuesta obj = licitacionAdjuntoRespuestaRepository.save(new LicitacionAdjuntoRespuesta(idLicitacion,file.getId(),file.getName(), file.getType(), file.getName(),file.getUrl()));
                listAdjuntoMoved.add(obj);
            });
        }

        //Eliminando adjuntos ausentes en el request
        List<LicitacionAdjuntoRespuesta> listaAdjuntosActual = licitacionAdjuntoRespuestaRepository.findByIdLicitacionOrderByArchivoId(idLicitacion);
        log.error("listaAdjuntosActual size: " + listaAdjuntosActual.size());
        for (LicitacionAdjuntoRespuesta obj1 : listaAdjuntosActual){
            Boolean encontrado = false;
            for (LicitacionAdjuntoRespuesta obj2 : listAdjunto){
                if ((obj1.getArchivoId()).equals(obj2.getArchivoId())){
                    encontrado = true;
                    break;
                }
            }
            if (!encontrado){
                licitacionAdjuntoRespuestaRepository.deleteById(obj1.getId());
                cmisService.deleteFile(obj1.getArchivoId());
                continue;
            }
        }

//        //Se obtiene lista de adjuntos final
//        List<LicitacionAdjuntoRespuesta> listaAdjuntosResult = licitacionAdjuntoRespuestaRepository.findByIdLicitacionOrderByArchivoId(idLicitacion);
//        log.error("listaAdjuntosResult size: " + listaAdjuntosResult.size());
//        return listaAdjuntosResult;

        return listAdjuntoMoved;
    }

    public void enviarCorreoRespuesta(List<LicitacionAdjuntoRespuesta> result) throws Exception {
        if (result == null || result.size() <= 0) {
            return;
        }
        Integer idLicitacion = result.get(0).getIdLicitacion();
        Licitacion licitacion = this.licitacionRepository.getOne(idLicitacion);
        List<LicitacionProveedor> licitacionProveedorList = this.licitacionProveedorRepository.
                findByLicitacionSiParticipa(licitacion, Constant.S);
        String sNroLicitacion = this.getNroLicitacionString(licitacion.getNroLicitacion(), licitacion.getAnioLicitacion());
        licitacion.setNroLicitacionString(sNroLicitacion);
        for (LicitacionProveedor licitacionProveedor: licitacionProveedorList) {
            Proveedor proveedor = licitacionProveedor.getProveedor();
            log.error("enviarCorreoRecordatorio ENVIANDO proveedor: "+ proveedor.toString());
            this.envioRespuestaPreguntaLicitacionNotificacion.enviar(
                    parametroMapper.getMailSetting(),
                    proveedor,
                    licitacion);
        }
    }

    private String getNroLicitacionString(Integer numero, Integer annio){
        String texto = ("00000000" + numero);
        String nroLicitacionString = annio + texto.substring(texto.length() - 8, texto.length());

        return nroLicitacionString;
    }

}