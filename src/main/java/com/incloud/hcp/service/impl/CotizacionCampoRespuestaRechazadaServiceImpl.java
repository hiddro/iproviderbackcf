/*
 * Project home: https://github.com/jaxio/celerio-angular-quickstart
 * 
 * Source code generated by Celerio, an Open Source code generator by Jaxio.
 * Documentation: http://www.jaxio.com/documentation/celerio/
 * Source code: https://github.com/jaxio/celerio/
 * Follow us on twitter: @jaxiosoft
 * This header can be customized in Celerio conf...
 * Template pack-angular:src/main/java/dto/EntityDTOService.java.e.vm
 */
package com.incloud.hcp.service.impl;

import com.incloud.hcp.config.excel.ExcelDefault;
import com.incloud.hcp.domain.CotizacionCampoRespuestaRechazada;
import com.incloud.hcp.domain.CotizacionCampoRespuestaRechazada_;
import com.incloud.hcp.repository.CotizacionCampoRespuestaRechazadaRepository;
import com.incloud.hcp.repository.CotizacionRechazadaRepository;
import com.incloud.hcp.repository.GrupoCondicionLicRespuestaRepository;
import com.incloud.hcp.repository.LicitacionGrupoCondicionLicRepository;
import com.incloud.hcp.service.CotizacionCampoRespuestaRechazadaService;
import com.incloud.hcp.service.delta.CotizacionRechazadaDeltaService;
import com.incloud.hcp.service.support.PageRequestByExample;
import com.incloud.hcp.service.support.PageResponse;
import org.apache.commons.lang.StringUtils;
import org.apache.poi.ss.usermodel.CellStyle;
import org.apache.poi.ss.usermodel.DataFormat;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.xssf.streaming.SXSSFSheet;
import org.apache.poi.xssf.streaming.SXSSFWorkbook;
import org.apache.poi.xssf.usermodel.XSSFCellStyle;
import org.apache.poi.xssf.usermodel.XSSFRow;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.MessageSource;
import org.springframework.data.domain.Example;
import org.springframework.data.domain.ExampleMatcher;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Sort;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Propagation;
import org.springframework.transaction.annotation.Transactional;

import java.awt.*;
import java.math.BigDecimal;
import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

/**
 * A simple DTO Facility for CotizacionCampoRespuestaRechazada.
 */
@Service
@Transactional(propagation = Propagation.REQUIRED, rollbackFor = Exception.class)
public abstract class CotizacionCampoRespuestaRechazadaServiceImpl implements CotizacionCampoRespuestaRechazadaService {

    protected final Logger log = LoggerFactory.getLogger(CotizacionCampoRespuestaRechazadaServiceImpl.class);

    protected final String NAME_SHEET = "CotizacionCampoRespuestaRechazada";
    protected final String CONFIG_TITLE = "com/incloud/hcp/excel/CotizacionCampoRespuestaRechazadaExcel.xml";

    @Autowired
    protected MessageSource messageSource;

    @Autowired
    protected CotizacionCampoRespuestaRechazadaRepository cotizacionCampoRespuestaRechazadaRepository;

    @Autowired
    protected GrupoCondicionLicRespuestaRepository grupoCondicionLicRespuestaRepository;

    @Autowired
    protected LicitacionGrupoCondicionLicRepository licitacionGrupoCondicionLicRepository;

    @Autowired
    protected CotizacionRechazadaDeltaService cotizacionRechazadaDeltaService;

    @Autowired
    protected CotizacionRechazadaRepository cotizacionRechazadaRepository;

    @Transactional(readOnly = true)
    public Optional<CotizacionCampoRespuestaRechazada> findOne(Integer id) {
        log.debug("Ingresando findOne: ", id);
        return this.cotizacionCampoRespuestaRechazadaRepository.findById(id);
    }

    @Transactional(readOnly = true)
    public List<CotizacionCampoRespuestaRechazada> findAll() {
        log.debug("Ingresando findAll");
        Sort sort = Sort.by("id");
        sort = this.setFindAll(sort);
        List<CotizacionCampoRespuestaRechazada> lista = this.cotizacionCampoRespuestaRechazadaRepository.findAll(sort);
        return lista;
    }

    protected abstract Sort setFindAll(Sort sort);

    @Transactional(readOnly = true)
    public List<CotizacionCampoRespuestaRechazada> find(CotizacionCampoRespuestaRechazada req) {
        log.debug("Ingresando find: ", req);
        Example<CotizacionCampoRespuestaRechazada> example = null;
        CotizacionCampoRespuestaRechazada cotizacionCampoRespuestaRechazada = req;
        ExampleMatcher matcher = null;
        if (cotizacionCampoRespuestaRechazada != null) {
            matcher = ExampleMatcher.matching() //
                    .withMatcher(CotizacionCampoRespuestaRechazada_.comentario.getName(), match -> match.ignoreCase().startsWith())
                    .withMatcher(CotizacionCampoRespuestaRechazada_.textoRespuestaLibre.getName(), match -> match.ignoreCase().startsWith());
            example = Example.of(cotizacionCampoRespuestaRechazada, matcher);
        }
        Sort sort = Sort.by("id");
        sort = this.setFind(req, matcher, example, sort);
        List<CotizacionCampoRespuestaRechazada> lista = this.cotizacionCampoRespuestaRechazadaRepository.findAll(example, sort);
        return lista;
    }

    protected abstract Sort setFind(CotizacionCampoRespuestaRechazada req, ExampleMatcher matcher, Example<CotizacionCampoRespuestaRechazada> example,
            Sort sort);

    @Transactional(readOnly = true)
    public PageResponse<CotizacionCampoRespuestaRechazada> findPaginated(PageRequestByExample<CotizacionCampoRespuestaRechazada> req) {
        log.debug("Ingresando findPaginated: ", req);
        Example<CotizacionCampoRespuestaRechazada> example = null;
        CotizacionCampoRespuestaRechazada cotizacionCampoRespuestaRechazada = toEntity(req.example);
        ExampleMatcher matcher = null;
        if (cotizacionCampoRespuestaRechazada != null) {
            matcher = ExampleMatcher.matching() //
                    .withMatcher(CotizacionCampoRespuestaRechazada_.comentario.getName(), match -> match.ignoreCase().startsWith())
                    .withMatcher(CotizacionCampoRespuestaRechazada_.textoRespuestaLibre.getName(), match -> match.ignoreCase().startsWith());
            example = Example.of(cotizacionCampoRespuestaRechazada, matcher);
        }

        Page<CotizacionCampoRespuestaRechazada> page;
        Sort sort = Sort.by("id");
        sort = this.setFind(cotizacionCampoRespuestaRechazada, matcher, example, sort);
        req.generarLazyDefecto();
        this.setFindPaginated(req, matcher, example);
        if (example != null) {
            page = this.cotizacionCampoRespuestaRechazadaRepository.findAll(example, req.toPageable(sort));
        } else {
            page = this.cotizacionCampoRespuestaRechazadaRepository.findAll(req.toPageable(sort));
        }

        List<CotizacionCampoRespuestaRechazada> content = page.getContent().stream().map(this::toDTO).collect(Collectors.toList());
        return new PageResponse<>(page.getTotalPages(), page.getTotalElements(), content);
    }

    protected abstract void setFindPaginated(PageRequestByExample<CotizacionCampoRespuestaRechazada> req, ExampleMatcher matcher,
            Example<CotizacionCampoRespuestaRechazada> example);

    @Transactional(readOnly = true)
    public XSSFWorkbook downloadExcelXLSX(CotizacionCampoRespuestaRechazada req) {
        log.debug("Ingresando downloadExcelXLSX: ", req);
        List<CotizacionCampoRespuestaRechazada> lista = this.find(req);
        Optional<List<CotizacionCampoRespuestaRechazada>> oList = Optional.ofNullable(lista);
        if (!oList.isPresent()) {
            return null;
        }

        XSSFWorkbook book = new XSSFWorkbook();
        XSSFSheet sheet = book.createSheet();
        int numberOfSheets = book.getNumberOfSheets();
        book.setSheetName(numberOfSheets - 1, NAME_SHEET);
        ExcelDefault.createTitle(sheet, CONFIG_TITLE, book.createCellStyle(), book.createFont());
        CellStyle cellStyle = book.createCellStyle();
        DataFormat dataFormat = book.createDataFormat();

        lista.forEach(cotizacionCampoRespuestaRechazada -> {
            int lastRow = sheet.getLastRowNum();
            int i = lastRow < 0 ? 0 : lastRow;
            XSSFRow dataRow = sheet.createRow(i + 1);
            int contador = 0;
            ExcelDefault.setValueCell(cotizacionCampoRespuestaRechazada.getId(), dataRow.createCell(contador), cellStyle, dataFormat);
            contador++;
            ExcelDefault.setValueCell(cotizacionCampoRespuestaRechazada.getComentario(), dataRow.createCell(contador), cellStyle, dataFormat);
            contador++;
            ExcelDefault.setValueCell(cotizacionCampoRespuestaRechazada.getFechaRegistro(), dataRow.createCell(contador), cellStyle, dataFormat);
            contador++;
            ExcelDefault.setValueCell(cotizacionCampoRespuestaRechazada.getPeso(), dataRow.createCell(contador), cellStyle, dataFormat);
            contador++;
            ExcelDefault.setValueCell(cotizacionCampoRespuestaRechazada.getPuntaje(), dataRow.createCell(contador), cellStyle, dataFormat);
            contador++;
            ExcelDefault.setValueCell(cotizacionCampoRespuestaRechazada.getTextoRespuestaLibre(), dataRow.createCell(contador), cellStyle, dataFormat);
            contador++;
            /* Agregar aqui si desean colocar mas campos del BEAN */
            this.setDownloadExcelItem(cotizacionCampoRespuestaRechazada, dataRow);

        });
        this.setDownloadExcel(sheet);
        int totalColumn = sheet.getRow(0).getLastCellNum();
        for (int i = 0; i < totalColumn; i++) {
            sheet.autoSizeColumn(i, true);
        }
        return book;
    }

    protected void setDownloadExcelItem(CotizacionCampoRespuestaRechazada bean, XSSFRow dataRow) {

    }

    protected void setDownloadExcel(XSSFSheet sheet) {

    }

    @Transactional(readOnly = true)
    public SXSSFWorkbook downloadExcelSXLSX(CotizacionCampoRespuestaRechazada req) {
        log.debug("Ingresando downloadExcelSXLSX: ", req);
        List<CotizacionCampoRespuestaRechazada> lista = this.find(req);
        Optional<List<CotizacionCampoRespuestaRechazada>> oList = Optional.ofNullable(lista);
        if (!oList.isPresent()) {
            return null;
        }

        SXSSFWorkbook book = new SXSSFWorkbook(100);
        XSSFWorkbook xbook = book.getXSSFWorkbook();
        SXSSFSheet sheet = book.createSheet();
        sheet.trackAllColumnsForAutoSizing();
        int numberOfSheets = book.getNumberOfSheets();
        book.setSheetName(numberOfSheets - 1, NAME_SHEET);
        int nroColumnas = ExcelDefault.createTitle(xbook, sheet, CONFIG_TITLE);
        for (int i = 0; i < nroColumnas; i++) {
            sheet.autoSizeColumn(i, true);
        }
        sheet.untrackAllColumnsForAutoSizing();

        XSSFCellStyle cellStyle01 = ExcelDefault.devuelveCellStyle(xbook, new Color(0, 0, 1), new Color(226, 239, 218), false, (short) 10);
        XSSFCellStyle cellStyle02 = ExcelDefault.devuelveCellStyle(xbook, new Color(0, 0, 192), new Color(255, 255, 255), false, (short) 10);
        List<CellStyle> cellStyleList = null;
        List<CellStyle> cellStyleList01 = ExcelDefault.generarCellStyle(xbook, cellStyle01);
        List<CellStyle> cellStyleList02 = ExcelDefault.generarCellStyle(xbook, cellStyle02);
        boolean filaImpar = true;

        for (CotizacionCampoRespuestaRechazada cotizacionCampoRespuestaRechazada : lista) {
            int lastRow = sheet.getLastRowNum();
            int i = lastRow < 0 ? 0 : lastRow;
            Row dataRow = sheet.createRow(i + 1);
            int contador = 0;
            if (filaImpar) {
                cellStyleList = cellStyleList01;
            } else {
                cellStyleList = cellStyleList02;
            }
            filaImpar = !filaImpar;

            ExcelDefault.setValueCell(cotizacionCampoRespuestaRechazada.getId(), dataRow.createCell(contador), "I", cellStyleList);
            contador++;
            ExcelDefault.setValueCell(cotizacionCampoRespuestaRechazada.getComentario(), dataRow.createCell(contador), "S", cellStyleList);
            contador++;
            ExcelDefault.setValueCell(cotizacionCampoRespuestaRechazada.getFechaRegistro(), dataRow.createCell(contador), "DT", cellStyleList);
            contador++;
            ExcelDefault.setValueCell(cotizacionCampoRespuestaRechazada.getPeso(), dataRow.createCell(contador), "N", cellStyleList);
            contador++;
            ExcelDefault.setValueCell(cotizacionCampoRespuestaRechazada.getPuntaje(), dataRow.createCell(contador), "N", cellStyleList);
            contador++;
            ExcelDefault.setValueCell(cotizacionCampoRespuestaRechazada.getTextoRespuestaLibre(), dataRow.createCell(contador), "S", cellStyleList);
            contador++;
            /* Agregar aqui si desean colocar mas campos del BEAN */
            this.setDownloadExcelItem(cotizacionCampoRespuestaRechazada, dataRow);

        }
        this.setDownloadExcel(sheet);
        return book;
    }

    protected void setDownloadExcelItem(CotizacionCampoRespuestaRechazada bean, Row dataRow) {

    }

    protected void setDownloadExcel(Sheet sheet) {

    }

    @Transactional(readOnly = true)
    public SXSSFWorkbook generateInsertExcelSXLSX(CotizacionCampoRespuestaRechazada req) {
        log.debug("Ingresando generateInsertExcelSXLSX: ", req);
        List<CotizacionCampoRespuestaRechazada> lista = this.find(req);
        Optional<List<CotizacionCampoRespuestaRechazada>> oList = Optional.ofNullable(lista);
        if (!oList.isPresent()) {
            return null;
        }

        SXSSFWorkbook book = new SXSSFWorkbook(100);
        XSSFWorkbook xbook = book.getXSSFWorkbook();
        SXSSFSheet sheet = book.createSheet();
        sheet.trackAllColumnsForAutoSizing();
        int numberOfSheets = book.getNumberOfSheets();
        book.setSheetName(numberOfSheets - 1, NAME_SHEET);
        int nroColumnas = 1;
        for (int i = 0; i < nroColumnas; i++) {
            sheet.autoSizeColumn(i, true);
        }
        sheet.untrackAllColumnsForAutoSizing();
        XSSFCellStyle cellStyle01 = ExcelDefault.devuelveCellStyle(xbook, new Color(0, 0, 1), new Color(226, 239, 218), false, (short) 10);
        XSSFCellStyle cellStyle02 = ExcelDefault.devuelveCellStyle(xbook, new Color(0, 0, 192), new Color(255, 255, 255), false, (short) 10);
        List<CellStyle> cellStyleList = null;
        List<CellStyle> cellStyleList01 = ExcelDefault.generarCellStyle(xbook, cellStyle01);
        List<CellStyle> cellStyleList02 = ExcelDefault.generarCellStyle(xbook, cellStyle02);
        boolean filaImpar = true;

        for (CotizacionCampoRespuestaRechazada cotizacionCampoRespuestaRechazada : lista) {
            int lastRow = sheet.getLastRowNum();
            int i = lastRow < 0 ? 0 : lastRow;
            Row dataRow = sheet.createRow(i + 1);
            int contador = 0;
            if (filaImpar) {
                cellStyleList = cellStyleList01;
            } else {
                cellStyleList = cellStyleList02;
            }
            filaImpar = !filaImpar;
            String sqlInsert = "INSERT INTO cotizacion_campo_respuesta_rechazada(";
            sqlInsert = sqlInsert + "id_cotizacion_campo_respuesta_rechazada" + ", ";
            sqlInsert = sqlInsert + "comentario" + ", ";
            sqlInsert = sqlInsert + "fecha_registro" + ", ";
            sqlInsert = sqlInsert + "peso" + ", ";
            sqlInsert = sqlInsert + "puntaje" + ", ";
            sqlInsert = sqlInsert + "texto_respuesta_libre" + ")";
            sqlInsert = sqlInsert + " VALUES (";
            sqlInsert = sqlInsert + cotizacionCampoRespuestaRechazada.getId() + ", ";
            if (StringUtils.isBlank(cotizacionCampoRespuestaRechazada.getComentario())) {
                sqlInsert = sqlInsert + "null" + ", ";
            } else {
                sqlInsert = sqlInsert + "'" + cotizacionCampoRespuestaRechazada.getComentario() + "'" + ", ";
            }
            if (Optional.ofNullable(cotizacionCampoRespuestaRechazada.getFechaRegistro()).isPresent()) {
                sqlInsert = sqlInsert + cotizacionCampoRespuestaRechazada.getFechaRegistro().getTime() + ", ";
            }

            else {
                sqlInsert = sqlInsert + "null" + ", ";
            }
            sqlInsert = sqlInsert + cotizacionCampoRespuestaRechazada.getPeso() + ", ";
            sqlInsert = sqlInsert + cotizacionCampoRespuestaRechazada.getPuntaje() + ", ";
            if (StringUtils.isBlank(cotizacionCampoRespuestaRechazada.getTextoRespuestaLibre())) {
                sqlInsert = sqlInsert + "null";
            } else {
                sqlInsert = sqlInsert + "'" + cotizacionCampoRespuestaRechazada.getTextoRespuestaLibre() + "'";
            }
            sqlInsert = sqlInsert + " );";
            ExcelDefault.setValueCell(sqlInsert, dataRow.createCell(contador), "S", cellStyleList);
            contador++;
        }
        return book;
    }

    protected CotizacionCampoRespuestaRechazada completarDatosBean(CotizacionCampoRespuestaRechazada bean) {
        BigDecimal data = new BigDecimal(0.00);
        if (Optional.ofNullable(bean.getPeso()).isPresent()) {
            data = new BigDecimal(bean.getPeso().floatValue()).setScale(17, BigDecimal.ROUND_HALF_UP);
            bean.setPeso(data);
        }
        if (Optional.ofNullable(bean.getPuntaje()).isPresent()) {
            bean.setPuntaje(bean.getPuntaje().setScale(2, BigDecimal.ROUND_HALF_UP));
        }
        bean = this.setCompletarDatosBean(bean);
        return bean;
    }

    protected CotizacionCampoRespuestaRechazada setCompletarDatosBean(CotizacionCampoRespuestaRechazada bean) {
        return bean;
    }

    /**
     * Save the passed dto as a new entity or update the corresponding entity if any.
     */
    public CotizacionCampoRespuestaRechazada save(CotizacionCampoRespuestaRechazada dto) {
        log.debug("Ingresando save: ", dto);
        if (dto == null) {
            return null;
        }
        dto = this.completarDatosBean(dto);
        dto = this.setBeforeSave(dto);
        this.setSave(dto);
        dto = this.cotizacionCampoRespuestaRechazadaRepository.save(dto);
        dto = this.setAfterSave(dto);
        return dto;
    }

    protected abstract void setSave(CotizacionCampoRespuestaRechazada dto);

    protected CotizacionCampoRespuestaRechazada setBeforeSave(CotizacionCampoRespuestaRechazada dto) {
        return dto;
    }

    protected CotizacionCampoRespuestaRechazada setAfterSave(CotizacionCampoRespuestaRechazada dto) {
        return dto;
    }

    /**
    * Save new entity or update the corresponding entity if any.
    */
    public CotizacionCampoRespuestaRechazada create(CotizacionCampoRespuestaRechazada dto) {
        log.debug("Ingresando create: ", dto);
        if (dto == null) {
            return null;
        }

        CotizacionCampoRespuestaRechazada cotizacionCampoRespuestaRechazada;
        cotizacionCampoRespuestaRechazada = new CotizacionCampoRespuestaRechazada();

        cotizacionCampoRespuestaRechazada.setComentario(dto.getComentario());
        cotizacionCampoRespuestaRechazada.setFechaRegistro(dto.getFechaRegistro());
        cotizacionCampoRespuestaRechazada.setPeso(dto.getPeso());
        cotizacionCampoRespuestaRechazada.setPuntaje(dto.getPuntaje());
        cotizacionCampoRespuestaRechazada.setTextoRespuestaLibre(dto.getTextoRespuestaLibre());
        cotizacionCampoRespuestaRechazada = this.completarDatosBean(cotizacionCampoRespuestaRechazada);
        this.setCreate(cotizacionCampoRespuestaRechazada);
        return this.cotizacionCampoRespuestaRechazadaRepository.save(cotizacionCampoRespuestaRechazada);
    }

    protected abstract void setCreate(CotizacionCampoRespuestaRechazada dto);

    protected String validacionesPrevias(CotizacionCampoRespuestaRechazada dto) {
        return "";
    }

    /**
     * Delete the passed dto as a new entity or update the corresponding entity if any.
     */
    public void delete(Integer id) {
        log.debug("Ingresando delete: ", id);
        if (id == null) {
            return;
        }
        this.setDelete(id);
        this.cotizacionCampoRespuestaRechazadaRepository.deleteById(id);
    }

    protected abstract void setDelete(Integer id);

    public void deleteAll() {
        log.debug("Ingresando deleteAll");
        this.setDeleteAll();
        this.cotizacionCampoRespuestaRechazadaRepository.deleteAll();
    }

    protected abstract void setDeleteAll();

    /**
     * Converts the passed cotizacionCampoRespuestaRechazada to a DTO.
     */
    protected CotizacionCampoRespuestaRechazada toDTO(CotizacionCampoRespuestaRechazada cotizacionCampoRespuestaRechazada) {
        return cotizacionCampoRespuestaRechazada;
    }

    /**
     * Converts the passed dto to a CotizacionCampoRespuestaRechazada.
     * Convenient for query by example.
     */
    protected CotizacionCampoRespuestaRechazada toEntity(CotizacionCampoRespuestaRechazada dto) {
        return dto;
    }

}