/*
 * Project home: https://github.com/jaxio/celerio-angular-quickstart
 * 
 * Source code generated by Celerio, an Open Source code generator by Jaxio.
 * Documentation: http://www.jaxio.com/documentation/celerio/
 * Source code: https://github.com/jaxio/celerio/
 * Follow us on twitter: @jaxiosoft
 * This header can be customized in Celerio conf...
 * Template pack-angular:src/main/java/dto/EntitydeltaDTOService.java.e.vm
 */
package com.incloud.hcp.service.delta.impl;

import com.incloud.hcp.bean.UserSession;
import com.incloud.hcp.domain.*;
import com.incloud.hcp.myibatis.mapper.ParametroMapper;
import com.incloud.hcp.repository.*;
import com.incloud.hcp.service.delta.LicitacionProveedorRenegociacionDeltaService;
import com.incloud.hcp.service.impl.LicitacionProveedorRenegociacionServiceImpl;
import com.incloud.hcp.service.notificacion.LicitacionRenegociacionNotificacion;
import com.incloud.hcp.service.support.PageRequestByExample;
import com.incloud.hcp.util.DateUtils;
import com.incloud.hcp.util.constant.CotizacionConstant;
import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Example;
import org.springframework.data.domain.ExampleMatcher;
import org.springframework.data.domain.Sort;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Propagation;
import org.springframework.transaction.annotation.Transactional;

import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Optional;

/**
 * A simple DTO Facility for LicitacionProveedorRenegociacion.
 */
@Service
@Transactional(propagation = Propagation.REQUIRED, rollbackFor = Exception.class)
public class LicitacionProveedorRenegociacionDeltaServiceImpl extends LicitacionProveedorRenegociacionServiceImpl
        implements LicitacionProveedorRenegociacionDeltaService {

    @Autowired
    private LicitacionProveedorRepository licitacionProveedorRepository;

    @Autowired
    private CotizacionRepository cotizacionRepository;

    @Autowired
    private CotizacionAdjuntoRepository cotizacionAdjuntoRepository;

    @Autowired
    private CotizacionDetalleRepository cotizacionDetalleRepository;

    @Autowired
    private CotizacionCampoRespuestaRepository cotizacionCampoRespuestaRepository;

    @Autowired
    private CotizacionRechazadaRepository cotizacionRechazadaRepository;

    @Autowired
    private CotizacionAdjuntoRechazadaRepository cotizacionAdjuntoRechazadaRepository;

    @Autowired
    private CotizacionDetalleRechazadaRepository cotizacionDetalleRechazadaRepository;

    @Autowired
    private CotizacionCampoRespuestaRechazadaRepository cotizacionCampoRespuestaRechazadaRepository;

    @Autowired
    private LicitacionRepository licitacionRepository;

    @Autowired
    private ProveedorRepository proveedorRepository;

    @Autowired
    private LicitacionRenegociacionNotificacion licitacionRenegociacionNotificacion;

    @Autowired
    private ParametroMapper parametroMapper;


    /**************************/
    /* Metodos Personalizados */
    /**************************/
    public LicitacionProveedorRenegociacion grabarRegistroRenegociacion(LicitacionProveedorRenegociacion licitacionProveedorRenegociacion) throws Exception {

        log.error("grabarRegistroRenegociacion 00");
        licitacionProveedorRenegociacion.setId(null);
        LicitacionProveedor licitacionProveedor = licitacionProveedorRenegociacion.getIdLicitacion();
        Licitacion licitacion = licitacionProveedor.getLicitacion();
        licitacion = this.licitacionRepository.getOne(licitacion.getIdLicitacion());
        Proveedor proveedor = licitacionProveedor.getProveedor();
        proveedor = this.proveedorRepository.getOne(proveedor.getIdProveedor());

        Timestamp fechaCierreRecepcionLicitacion = licitacion.getFechaCierreRecepcionOferta();
        Timestamp fechaUtimaRenegociacionLicitacion = licitacion.getFechaUltimaRenegociacion();
        if (fechaCierreRecepcionLicitacion.compareTo(licitacionProveedorRenegociacion.getFechaCierreRecepcion()) > 0) {
            String fecha = DateUtils.convertDateToString("dd/MM/yyyy HH:mm:ss", fechaCierreRecepcionLicitacion);
            throw new Exception("Fecha de Renegociación debe ser mayor a la Fecha de Cierre de Recepción de Ofertas: " + fecha);
        }
        LicitacionProveedor licitacionProveedorActual = this.licitacionProveedorRepository.
                getByLicitacionAndProveedor(licitacion, proveedor);
        Date fechaCierreRecepcionLicitacionActual = licitacionProveedorActual.getFechaCierreRecepcion();
        if (fechaCierreRecepcionLicitacionActual.compareTo(licitacionProveedorRenegociacion.getFechaCierreRecepcion()) > 0) {
            String fecha = DateUtils.convertDateToString("dd/MM/yyyy HH:mm:ss", fechaCierreRecepcionLicitacionActual);
            throw new Exception("Fecha de Renegociación debe ser mayor a la Fecha Actual de Renegociación: " + fecha);
        }

        /* Grabando informacion */
        log.error("grabarRegistroRenegociacion licitacionProveedorRenegociacion: " + licitacionProveedorRenegociacion.toString());
        licitacionProveedorRenegociacion = this.licitacionProveedorRenegociacionRepository.save(licitacionProveedorRenegociacion);
        String sFechaCierre = licitacionProveedorRenegociacion.getFechaCierreRecepcionString();
        Date fechaCierre = DateUtils.convertStringToDate("dd/MM/yyyy H:mm:ss",sFechaCierre);
        licitacionProveedorRenegociacion.setFechaCierreRecepcion(fechaCierre);

        licitacionProveedor.setFechaCierreRecepcion(licitacionProveedorRenegociacion.getFechaCierreRecepcion());
        this.licitacionProveedorRepository.save(licitacionProveedor);
        log.error("grabarRegistroRenegociacion licitacionProveedor: " + licitacionProveedor.toString());

        /* Verificando si es la ultima fecha de Renegociacion */
        if (fechaUtimaRenegociacionLicitacion.compareTo(licitacionProveedorRenegociacion.getFechaCierreRecepcion()) < 0) {
            Timestamp ts=new Timestamp(licitacionProveedorRenegociacion.getFechaCierreRecepcion().getTime());
            licitacion.setFechaUltimaRenegociacion(ts);
            licitacionRepository.save(licitacion);
        }

        /* Grabando cotizacion en las tablas historicas - foto del momento */
        //Cotización
        log.error("grabarRegistroRenegociacion licitacion: " + licitacion.toString());
        log.error("grabarRegistroRenegociacion proveedor: " + proveedor.toString());
        Cotizacion cotizacion = this.cotizacionRepository.getByLicitacionAndProveedor(licitacion, proveedor);

        if (Optional.ofNullable(cotizacion).isPresent()) {
            log.error("grabarRegistroRenegociacion cotizacion: " + cotizacion.toString());
            CotizacionRechazada cotizacionRechazada = new CotizacionRechazada();
            BeanUtils.copyProperties(cotizacion, cotizacionRechazada);
            Date fechaActual = DateUtils.obtenerFechaHoraActual();
            cotizacionRechazada.setId(null);
            cotizacionRechazada.setIdMoneda(cotizacion.getMoneda());
            cotizacionRechazada.setIdLicitacion(cotizacion.getLicitacion());
            cotizacionRechazada.setIdProveedor(cotizacion.getProveedor());
            cotizacionRechazada.setFechaRechazo(fechaActual);
            cotizacionRechazada = this.cotizacionRechazadaRepository.save(cotizacionRechazada);
            log.error("grabarRegistroRenegociacion cotizacionRechazada: " + cotizacionRechazada.toString());

            //Detalle
            List<CotizacionDetalle> cotizacionDetalleList = this.cotizacionDetalleRepository.
                    findByCotizacionOrderByDescripcion(cotizacion);
            List<CotizacionDetalleRechazada> cotizacionDetalleRechazadaList = new ArrayList<CotizacionDetalleRechazada>();
            for (CotizacionDetalle bean : cotizacionDetalleList) {
                CotizacionDetalleRechazada cotizacionDetalleRechazada = new CotizacionDetalleRechazada();
                BeanUtils.copyProperties(bean, cotizacionDetalleRechazada);
                cotizacionDetalleRechazada.setId(null);
                cotizacionDetalleRechazada.setIdCotizacionRechazada(cotizacionRechazada);
                cotizacionDetalleRechazada.setIdBienServicio(bean.getBienServicio());
                cotizacionDetalleRechazada.setIdUnidadMedida(bean.getUnidadMedida());
                cotizacionDetalleRechazada.setIdLicitacionDetalle(bean.getLicitacionDetalle());
                cotizacionDetalleRechazadaList.add(cotizacionDetalleRechazada);
            }
            if (cotizacionDetalleRechazadaList.size() > 0) {
                this.cotizacionDetalleRechazadaRepository.saveAll(cotizacionDetalleRechazadaList);
            }
            log.error("grabarRegistroRenegociacion cotizacionDetalleRechazadaList: " + cotizacionDetalleRechazadaList.toString());

            //Adjunto
            List<CotizacionAdjunto> cotizacionAdjuntoList = this.cotizacionAdjuntoRepository.findByCotizacion(cotizacion);
            List<CotizacionAdjuntoRechazada> cotizacionAdjuntoRechazadaList = new ArrayList<CotizacionAdjuntoRechazada>();
            for (CotizacionAdjunto bean : cotizacionAdjuntoList) {
                CotizacionAdjuntoRechazada cotizacionAdjuntoRechazada = new CotizacionAdjuntoRechazada();
                BeanUtils.copyProperties(bean, cotizacionAdjuntoRechazada);
                cotizacionAdjuntoRechazada.setId(null);
                cotizacionAdjuntoRechazada.setIdCotizacionRechazada(cotizacionRechazada);
                cotizacionAdjuntoRechazadaList.add(cotizacionAdjuntoRechazada);
            }
            if (cotizacionAdjuntoRechazadaList.size() > 0) {
                this.cotizacionAdjuntoRechazadaRepository.saveAll(cotizacionAdjuntoRechazadaList);
            }
            log.error("grabarRegistroRenegociacion cotizacionAdjuntoRechazadaList: " + cotizacionAdjuntoRechazadaList.toString());

            //CampoRespuesta
            List<CotizacionCampoRespuesta> cotizacionCampoRespuestaList = this.cotizacionCampoRespuestaRepository.
                    findByCotizacion(cotizacion);
            List<CotizacionCampoRespuestaRechazada> cotizacionCampoRespuestaRechazadaList = new ArrayList<CotizacionCampoRespuestaRechazada>();
            for (CotizacionCampoRespuesta bean : cotizacionCampoRespuestaList) {
                log.error("grabarRegistroRenegociacion cotizacionCampoRespuesta bean: " + bean.toString());
                CotizacionCampoRespuestaRechazada cotizacionCampoRespuestaRechazada = new CotizacionCampoRespuestaRechazada();

                BeanUtils.copyProperties(bean, cotizacionCampoRespuestaRechazada);
                cotizacionCampoRespuestaRechazada.setId(null);
                cotizacionCampoRespuestaRechazada.setIdCotizacionRechazada(cotizacionRechazada);
                cotizacionCampoRespuestaRechazada.setIdCondicionRespuesta(bean.getGrupoCondicionLicRespuesta());
                cotizacionCampoRespuestaRechazada.setIdLicitacionGrupoCondicion(bean.getLicitacionGrupoCondicionLic());
                cotizacionCampoRespuestaRechazada.setPeso(bean.getPeso());
                log.error("grabarRegistroRenegociacion cotizacionCampoRespuestaRechazada: " + cotizacionCampoRespuestaRechazada.toString());
                cotizacionCampoRespuestaRechazadaList.add(cotizacionCampoRespuestaRechazada);
            }
            if (cotizacionCampoRespuestaRechazadaList.size() > 0) {
                this.cotizacionCampoRespuestaRechazadaRepository.saveAll(cotizacionCampoRespuestaRechazadaList);
            }
            log.error("grabarRegistroRenegociacion cotizacionCampoRespuestaRechazadaList: " + cotizacionCampoRespuestaRechazadaList.toString());

            /* Cambiando estado de la Cotización para que puede ser cotizada nuevamente */
            this.cotizacionRepository.updateEstadoLicitacion(CotizacionConstant.ESTADO_GENERADA,
                    cotizacion.getUsuarioModificacion(), cotizacion.getIdCotizacion() );
        }


        log.error("FIN grabarRegistroRenegociacion ");
        return licitacionProveedorRenegociacion;
    }

    public void enviarCorreoRegistroRenegociacion(LicitacionProveedorRenegociacion licitacionProveedorRenegociacion) {
        UserSession userSession = this.getUserSession();
        String sfechaRecepcion = DateUtils.convertDateToString("dd/MM/yyyy HH:mm:ss",
                licitacionProveedorRenegociacion.getFechaCierreRecepcion());
        String camposEdit="Nueva Fecha de Cierre de Recepcion: " +  sfechaRecepcion;

        log.error("grabarRegistroRenegociacion 01");
        LicitacionProveedor licitacionProveedor = licitacionProveedorRenegociacion.getIdLicitacion();
        Licitacion licitacion = licitacionProveedor.getLicitacion();
        licitacion = this.licitacionRepository.getOne(licitacion.getIdLicitacion());
        Proveedor proveedor = licitacionProveedor.getProveedor();
        proveedor = this.proveedorRepository.getOne(proveedor.getIdProveedor());
        String sNroLicitacion = this.getNroLicitacionString(licitacion.getNroLicitacion(), licitacion.getAnioLicitacion());
        licitacion.setNroLicitacionString(sNroLicitacion);

        /* Enviando Correo */
        String motivoRenegociacion = licitacionProveedorRenegociacion.getMotivoRenegociacion();
        this.licitacionRenegociacionNotificacion.enviar(parametroMapper.getMailSetting(),
                proveedor,
                licitacion,
                camposEdit,
                motivoRenegociacion,
                userSession.getDisplayName(),
                userSession.getMail());
    }


    private String getNroLicitacionString(Integer numero, Integer annio){
        String texto = ("00000000" + numero);
        String nroLicitacionString = annio + texto.substring(texto.length() - 8, texto.length());

        return nroLicitacionString;
    }


    /**************************/
    /* Metodos Generados      */
    /**************************/

    protected Sort setFindAll(Sort sort) {
        return sort;
    }

    protected Sort setFind(LicitacionProveedorRenegociacion req, ExampleMatcher matcher, Example<LicitacionProveedorRenegociacion> example, Sort sort) {
        return sort;
    }

    protected void setFindPaginated(PageRequestByExample<LicitacionProveedorRenegociacion> req, ExampleMatcher matcher,
            Example<LicitacionProveedorRenegociacion> example) {
        return;
    }

    protected void setCreate(LicitacionProveedorRenegociacion dto) {

    }

    protected void setSave(LicitacionProveedorRenegociacion dto) {

    }

    protected void setDelete(Integer id) {

    }

    protected void setDeleteAll() {

    }

}