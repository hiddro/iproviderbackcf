/*
 * Project home: https://github.com/jaxio/celerio-angular-quickstart
 * 
 * Source code generated by Celerio, an Open Source code generator by Jaxio.
 * Documentation: http://www.jaxio.com/documentation/celerio/
 * Source code: https://github.com/jaxio/celerio/
 * Follow us on twitter: @jaxiosoft
 * This header can be customized in Celerio conf...
 * Template pack-angular:src/main/java/dto/EntitydeltaDTOService.java.e.vm
 */
package com.incloud.hcp.service.delta.impl;

import com.incloud.hcp.config.excel.ExcelDefault;
import com.incloud.hcp.domain.Licitacion;
import com.incloud.hcp.domain.LicitacionProveedorPregunta;
import com.incloud.hcp.domain.Proveedor;
import com.incloud.hcp.exception.PortalException;
import com.incloud.hcp.myibatis.mapper.ParametroMapper;
import com.incloud.hcp.repository.LicitacionRepository;
import com.incloud.hcp.repository.ProveedorRepository;
import com.incloud.hcp.service.delta.LicitacionProveedorPreguntaDeltaService;
import com.incloud.hcp.service.impl.LicitacionProveedorPreguntaServiceImpl;
import com.incloud.hcp.service.notificacion.EnviarPreguntaLicitacionNotificacion;
import com.incloud.hcp.service.support.PageRequestByExample;
import com.incloud.hcp.util.DateUtils;
import org.apache.commons.collections4.map.LinkedMap;
import org.apache.poi.ss.usermodel.CellStyle;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.xssf.streaming.SXSSFSheet;
import org.apache.poi.xssf.streaming.SXSSFWorkbook;
import org.apache.poi.xssf.usermodel.XSSFCellStyle;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Example;
import org.springframework.data.domain.ExampleMatcher;
import org.springframework.data.domain.Sort;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Propagation;
import org.springframework.transaction.annotation.Transactional;

import java.awt.*;
import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.Optional;

/**
 * A simple DTO Facility for LicitacionProveedorPregunta.
 */
@Service
@Transactional(propagation = Propagation.REQUIRED, rollbackFor = Exception.class)
public class LicitacionProveedorPreguntaDeltaServiceImpl extends LicitacionProveedorPreguntaServiceImpl implements LicitacionProveedorPreguntaDeltaService {
    protected final String CONFIG_TITLE_LICITACION = "com/incloud/hcp/excel/LicitacionProveedorPreguntaExcel02.xml";

    @Autowired
    private EnviarPreguntaLicitacionNotificacion enviarPreguntaLicitacionNotificacion;

    @Autowired
    private ParametroMapper parametroMapper;

    @Autowired
    private LicitacionRepository licitacionRepository;

    @Autowired
    private ProveedorRepository proveedorRepository;

    /**************************/
    /* Metodos Personalizados */
    /**************************/

    @Transactional(readOnly = true)
    public SXSSFWorkbook downloadExcelSXLSXLicitacion(LicitacionProveedorPregunta req) {
        log.debug("Ingresando downloadExcelSXLSXLicitacion: ", req);
        List<LicitacionProveedorPregunta> lista = this.find(req);
        Optional<List<LicitacionProveedorPregunta>> oList = Optional.ofNullable(lista);
        if (!oList.isPresent()) {
            return null;
        }

        SXSSFWorkbook book = new SXSSFWorkbook(100);
        XSSFWorkbook xbook = book.getXSSFWorkbook();
        SXSSFSheet sheet = book.createSheet();
        sheet.trackAllColumnsForAutoSizing();
        int numberOfSheets = book.getNumberOfSheets();
        book.setSheetName(numberOfSheets - 1, NAME_SHEET);
        int nroColumnas = ExcelDefault.createTitle(xbook, sheet, CONFIG_TITLE_LICITACION);
        for (int i = 0; i < nroColumnas; i++) {
            sheet.autoSizeColumn(i, true);
        }
        sheet.untrackAllColumnsForAutoSizing();

        XSSFCellStyle cellStyle01 = ExcelDefault.devuelveCellStyle(xbook, new Color(0, 0, 1), new Color(226, 239, 218), false, (short) 10);
        XSSFCellStyle cellStyle02 = ExcelDefault.devuelveCellStyle(xbook, new Color(0, 0, 192), new Color(255, 255, 255), false, (short) 10);
        List<CellStyle> cellStyleList = null;
        List<CellStyle> cellStyleList01 = ExcelDefault.generarCellStyle(xbook, cellStyle01);
        List<CellStyle> cellStyleList02 = ExcelDefault.generarCellStyle(xbook, cellStyle02);
        boolean filaImpar = true;

        for (LicitacionProveedorPregunta licitacionProveedorPregunta : lista) {
            int lastRow = sheet.getLastRowNum();
            int i = lastRow < 0 ? 0 : lastRow;
            Row dataRow = sheet.createRow(i + 1);
            int contador = 0;
            if (filaImpar) {
                cellStyleList = cellStyleList01;
            } else {
                cellStyleList = cellStyleList02;
            }
            filaImpar = !filaImpar;
            Licitacion licitacion = this.licitacionRepository.getOne(licitacionProveedorPregunta.getIdLicitacion());
            Proveedor proveedor = this.proveedorRepository.getOne(licitacionProveedorPregunta.getIdProveedor());

            ExcelDefault.setValueCell(proveedor.getRuc(), dataRow.createCell(contador), "S", cellStyleList);
            contador++;
            ExcelDefault.setValueCell(proveedor.getRazonSocial(), dataRow.createCell(contador), "S", cellStyleList);
            contador++;
            ExcelDefault.setValueCell(licitacionProveedorPregunta.getPregunta(), dataRow.createCell(contador), "S", cellStyleList);
            contador++;
            /* Agregar aqui si desean colocar mas campos del BEAN */
            this.setDownloadExcelItem(licitacionProveedorPregunta, dataRow);

        }
        this.setDownloadExcel(sheet);
        return book;
    }

    public List<LicitacionProveedorPregunta> grabar(List<LicitacionProveedorPregunta> licitacionProveedorPreguntaList) throws Exception {
        if (licitacionProveedorPreguntaList == null || licitacionProveedorPreguntaList.size() <= 0) {
            throw new Exception("Lista de Preguntas se encuentra vacío, debe al menos enviar una pregunta para ser absuelta");
        }
        LicitacionProveedorPregunta licitacionProveedorPreguntaInicial = licitacionProveedorPreguntaList.get(0);
        Integer idLicitacion = licitacionProveedorPreguntaInicial.getIdLicitacion();
        Integer idProveedor = licitacionProveedorPreguntaInicial.getIdProveedor();
        Licitacion licitacion = this.licitacionRepository.getOne(idLicitacion);
        Timestamp fechaCierreConsultaRespuesta = licitacion.getFechaCierreConsultaPregunta();
        if (Optional.ofNullable(fechaCierreConsultaRespuesta).isPresent()) {
            if (fechaCierreConsultaRespuesta.compareTo(DateUtils.obtenerFechaHoraActual()) < 0) {
                String fechaCierreString = DateUtils.convertDateToString("dd/MM/yyyy HH:mm:ss", fechaCierreConsultaRespuesta);
                throw new PortalException("No es posible enviar Consultas debido que se excedió de la Fecha de Cierre de Recepción de Preguntas: " + fechaCierreString);
            }
        }

        this.licitacionProveedorPreguntaRepository.deleteDetailByLicitacionProveedor(idLicitacion, idProveedor);
        this.licitacionProveedorPreguntaRepository.saveAll(licitacionProveedorPreguntaList);
        return licitacionProveedorPreguntaList;
    }

    public void enviarCorreoPreguntaLicitacion(List<LicitacionProveedorPregunta> licitacionProveedorPreguntaList) {
        LicitacionProveedorPregunta licitacionProveedorPreguntaInicial = licitacionProveedorPreguntaList.get(0);
        Integer idLicitacion = licitacionProveedorPreguntaInicial.getIdLicitacion();
        Integer idProveedor = licitacionProveedorPreguntaInicial.getIdProveedor();
        Licitacion licitacion = this.licitacionRepository.getOne(idLicitacion);
        Proveedor proveedor = this.proveedorRepository.getOne(idProveedor);
        String sNroLicitacion = this.getNroLicitacionString(licitacion.getNroLicitacion(), licitacion.getAnioLicitacion());
        licitacion.setNroLicitacionString(sNroLicitacion);

        /* Enviando Correo */
        this.enviarPreguntaLicitacionNotificacion.enviar(parametroMapper.getMailSetting(),
                licitacion,
                proveedor);
    }

    private String getNroLicitacionString(Integer numero, Integer annio){
        String texto = ("00000000" + numero);
        String nroLicitacionString = annio + texto.substring(texto.length() - 8, texto.length());

        return nroLicitacionString;
    }

    /**************************/
    /* Metodos Generados      */
    /**************************/

    protected Sort setFindAll(Sort sort) {
        Sort.by(
                new Sort.Order(Sort.Direction.ASC, "idLicitacion"),
                new Sort.Order(Sort.Direction.ASC, "idProveedor"));
        return sort;
    }

    protected Sort setFind(LicitacionProveedorPregunta req, ExampleMatcher matcher, Example<LicitacionProveedorPregunta> example, Sort sort) {
        Sort.by(
                new Sort.Order(Sort.Direction.ASC, "idLicitacion"),
                new Sort.Order(Sort.Direction.ASC, "idProveedor"));
        return sort;
    }

    protected void setFindPaginated(PageRequestByExample<LicitacionProveedorPregunta> req, ExampleMatcher matcher,
            Example<LicitacionProveedorPregunta> example) {
        return;
    }

    protected void setCreate(LicitacionProveedorPregunta dto) {

    }

    protected void setSave(LicitacionProveedorPregunta dto) {

    }

    protected void setDelete(Integer id) {

    }

    protected void setDeleteAll() {

    }

    protected  List<LicitacionProveedorPregunta> generateReporte(Integer idLicitacion){

        return licitacionProveedorPreguntaRepository.findByIdLicitacionOrderByIdProveedor(idLicitacion);
    }


    ///export excel

    @Override
    public Map<String, Object> downloadExcel(Integer idLicitacion) {

        List<LicitacionProveedorPregunta> listaLicitacionProveedorPregunta = this.generateReporte(idLicitacion);

        List<Map<String, Object>> list = new ArrayList<>();

        for (LicitacionProveedorPregunta licitacionProveedorPregunta:listaLicitacionProveedorPregunta) {
            Proveedor proveedor = this.proveedorRepository.getOne(licitacionProveedorPregunta.getIdProveedor());
            Licitacion licitacion = this.licitacionRepository.getOne(licitacionProveedorPregunta.getIdLicitacion());
            licitacionProveedorPregunta.setProveedor(proveedor);
            licitacionProveedorPregunta.setLicitacion(licitacion);
        }

        for (LicitacionProveedorPregunta licitacionProveedorPregunta : listaLicitacionProveedorPregunta) {
            Map<String, Object> map = new LinkedMap<>();

            map.put("PROVEEDOR", licitacionProveedorPregunta.getProveedor().getRazonSocial());
            map.put("PREGUNTA", licitacionProveedorPregunta.getPregunta());
            map.put("RESPUESTA", "");

            list.add(map);
        }

        Map<String, Object> data = new LinkedMap<>();
        data.put("fileName", "Respuestas"); // sheet-name
        data.put("data", list);

        return data;


    }

    @Override
    public Map<String, Object> downloadExcelPrueba(Integer idLicitacion) {

        List<LicitacionProveedorPregunta> listaLicitacionProveedorPregunta = this.generateReporte(idLicitacion);

        List<Map<String, Object>> list = new ArrayList<>();

        for (LicitacionProveedorPregunta licitacionProveedorPregunta:listaLicitacionProveedorPregunta) {
            Proveedor proveedor = this.proveedorRepository.getOne(licitacionProveedorPregunta.getIdProveedor());
            Licitacion licitacion = this.licitacionRepository.getOne(licitacionProveedorPregunta.getIdLicitacion());
            licitacionProveedorPregunta.setProveedor(proveedor);
            licitacionProveedorPregunta.setLicitacion(licitacion);
        }

        for (LicitacionProveedorPregunta licitacionProveedorPregunta : listaLicitacionProveedorPregunta) {
            Map<String, Object> map = new LinkedMap<>();

            map.put("PROVEEDOR", licitacionProveedorPregunta.getProveedor().getRazonSocial());
            map.put("PREGUNTA", licitacionProveedorPregunta.getPregunta());
            map.put("RESPUESTA", "");

            list.add(map);
        }

        Map<String, Object> data = new LinkedMap<>();
        data.put("fileName", "PRUEBASRESP"); // sheet-name
        data.put("data", list);

        return data;


    }

}