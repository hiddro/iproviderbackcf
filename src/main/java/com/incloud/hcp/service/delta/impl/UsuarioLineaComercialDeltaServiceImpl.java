/*
 * Project home: https://github.com/jaxio/celerio-angular-quickstart
 * 
 * Source code generated by Celerio, an Open Source code generator by Jaxio.
 * Documentation: http://www.jaxio.com/documentation/celerio/
 * Source code: https://github.com/jaxio/celerio/
 * Follow us on twitter: @jaxiosoft
 * This header can be customized in Celerio conf...
 * Template pack-angular:src/main/java/dto/EntitydeltaDTOService.java.e.vm
 */
package com.incloud.hcp.service.delta.impl;

import com.incloud.hcp.bean.UserSession;
import com.incloud.hcp.domain.LineaComercial;
import com.incloud.hcp.domain.Usuario;
import com.incloud.hcp.domain.UsuarioLineaComercial;
import com.incloud.hcp.dto.UsuarioLineaComercialDto;
import com.incloud.hcp.service.delta.UsuarioLineaComercialDeltaService;
import com.incloud.hcp.service.impl.UsuarioLineaComercialServiceImpl;
import com.incloud.hcp.service.support.PageRequestByExample;
import org.springframework.context.i18n.LocaleContextHolder;
import org.springframework.data.domain.Example;
import org.springframework.data.domain.ExampleMatcher;
import org.springframework.data.domain.Sort;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Propagation;
import org.springframework.transaction.annotation.Transactional;

import java.util.List;
import java.util.Optional;

/**
 * A simple DTO Facility for UsuarioLineaComercial.
 */
@Service
@Transactional(propagation = Propagation.REQUIRED, rollbackFor = Exception.class)
public class UsuarioLineaComercialDeltaServiceImpl extends UsuarioLineaComercialServiceImpl implements UsuarioLineaComercialDeltaService {

    /**************************/
    /* Metodos Personalizados */
    /**************************/

    public List<UsuarioLineaComercial> grabarLista(UsuarioLineaComercialDto usuarioLineaComercialDto) throws Exception {
        Integer idUsuario = usuarioLineaComercialDto.getIdUsuario();
        Usuario usuario = this.usuarioRepository.getOne(idUsuario);
        if (!Optional.ofNullable(usuario).isPresent()) {
            throw new Exception("No se encontr√≥ Usuario con ID: " + idUsuario);
        }
        this.usuarioLineaComercialRepository.deleteByUsuario(idUsuario);
        List<UsuarioLineaComercial> usuarioLineaComercialList = usuarioLineaComercialDto.getUsuarioLineaComercialList();
        for (int i=0; i < usuarioLineaComercialList.size(); i++) {
            UsuarioLineaComercial bean = usuarioLineaComercialList.get(i);
            bean.setId(null);
            bean.setIdUsuario(usuario);
            bean = this.usuarioLineaComercialRepository.save(bean);
            usuarioLineaComercialList.set(i, bean);
        }
        return usuarioLineaComercialDto.getUsuarioLineaComercialList();
    }

    @Transactional(readOnly = true)
    public List<LineaComercial> devuelveLineaComercial(UserSession userSession) {
        log.debug("Ingresando devuelveLineaComercial: ", userSession);
        List<Usuario> usuarioList = this.usuarioRepository.findByCodigoUsuarioIdp(userSession.getId());
        if (usuarioList == null || usuarioList.size() <= 0 ) {
            return null;
        }
        Usuario usuario = usuarioList.get(0);
        List<LineaComercial> lineaComercialList = this.usuarioLineaComercialRepository.
                findLineaComercialByIdUsuario(usuario);
        return lineaComercialList;
    }

    @Transactional(readOnly = true)
    public List<LineaComercial> devuelveLineaComercial(String idHcp) {
        List<Usuario> usuarioList = this.usuarioRepository.findByCodigoUsuarioIdp(idHcp);
        if (usuarioList == null || usuarioList.size() <= 0 ) {
            return null;
        }
        Usuario usuario = usuarioList.get(0);
        List<LineaComercial> lineaComercialList = this.usuarioLineaComercialRepository.
                findLineaComercialByIdUsuario(usuario);
        return lineaComercialList;
    }

    @Transactional(readOnly = true)
    public String verificaLineaComercial(UserSession userSession) {
        log.debug("Ingresando verificaLineaComercial: ", userSession);
        List<Usuario> usuarioList = this.usuarioRepository.findByCodigoUsuarioIdp(userSession.getId());
        String msg = "";
        if (usuarioList == null || usuarioList.size() <= 0 ) {
            msg = this.messageSource.
                    getMessage("message.usuario.noexiste", null, LocaleContextHolder.getLocale());
            return msg;
        }
        Usuario usuario = usuarioList.get(0);
        List<LineaComercial> lineaComercialList = this.usuarioLineaComercialRepository.
                findLineaComercialByIdUsuario(usuario);
        if (lineaComercialList == null || lineaComercialList.size() <= 0 ) {
            msg = this.messageSource.
                    getMessage("message.usuario.noTieneLineaComercial", null, LocaleContextHolder.getLocale());
            return msg;
        }
        msg = this.messageSource.
                getMessage("message.usuario.ok", null, LocaleContextHolder.getLocale());
        return "";
    }


    /**************************/
    /* Metodos Generados      */
    /**************************/

    protected Sort setFindAll(Sort sort) {
        return sort;
    }

    protected Sort setFind(UsuarioLineaComercial req, ExampleMatcher matcher, Example<UsuarioLineaComercial> example, Sort sort) {
        return sort;
    }

    protected void setFindPaginated(PageRequestByExample<UsuarioLineaComercial> req, ExampleMatcher matcher, Example<UsuarioLineaComercial> example) {
        return;
    }

    protected void setCreate(UsuarioLineaComercial dto) {

    }

    protected void setSave(UsuarioLineaComercial dto) {

    }

    protected void setDelete(Integer id) {

    }

    protected void setDeleteAll() {

    }

}