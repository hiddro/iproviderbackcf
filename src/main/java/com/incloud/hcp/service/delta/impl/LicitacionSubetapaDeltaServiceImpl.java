/*
 * Project home: https://github.com/jaxio/celerio-angular-quickstart
 * 
 * Source code generated by Celerio, an Open Source code generator by Jaxio.
 * Documentation: http://www.jaxio.com/documentation/celerio/
 * Source code: https://github.com/jaxio/celerio/
 * Follow us on twitter: @jaxiosoft
 * This header can be customized in Celerio conf...
 * Template pack-angular:src/main/java/dto/EntitydeltaDTOService.java.e.vm
 */
package com.incloud.hcp.service.delta.impl;

import com.incloud.hcp.bean.UserSession;
import com.incloud.hcp.config.SystemLoggedUser;
import com.incloud.hcp.domain.*;
import com.incloud.hcp.dto.TrazabilidadEtapaRespuestaDto;
import com.incloud.hcp.dto.TrazabilidadFechaEtapaRespuestaDto;
import com.incloud.hcp.dto.TrazabilidadRespuestaDto;
import com.incloud.hcp.enums.EstadoLicitacionEnum;
import com.incloud.hcp.enums.TrazabilidadTypeEnum;
import com.incloud.hcp.exception.PortalException;
import com.incloud.hcp.myibatis.mapper.ParametroMapper;
import com.incloud.hcp.repository.LicitacionProveedorRenegociacionRepository;
import com.incloud.hcp.repository.LicitacionProveedorRepository;
import com.incloud.hcp.repository.LicitacionRepository;
import com.incloud.hcp.repository.LicitacionSubetapaRepository;
import com.incloud.hcp.service.delta.LicitacionSubetapaDeltaService;
import com.incloud.hcp.service.impl.LicitacionSubetapaServiceImpl;
import com.incloud.hcp.service.notificacion.EnvioCorreoRecordatorioNotificacion;
import com.incloud.hcp.service.notificacion.LicitacionActualizarEtapasNotificacion;
import com.incloud.hcp.service.support.PageRequestByExample;
import com.incloud.hcp.util.Constant;
import com.incloud.hcp.util.DateUtils;
import org.apache.commons.lang.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Example;
import org.springframework.data.domain.ExampleMatcher;
import org.springframework.data.domain.Sort;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Propagation;
import org.springframework.transaction.annotation.Transactional;

import java.sql.Timestamp;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.*;
import java.util.stream.Collectors;

/**
 * A simple DTO Facility for LicitacionSubetapa.
 */
@Service
@Transactional(propagation = Propagation.REQUIRED, rollbackFor = Exception.class)
public class LicitacionSubetapaDeltaServiceImpl extends LicitacionSubetapaServiceImpl implements LicitacionSubetapaDeltaService {

    @Autowired
    private EnvioCorreoRecordatorioNotificacion envioCorreoRecordatorioNotificacion;

    @Autowired
    private ParametroMapper parametroMapper;

    @Autowired
    private LicitacionSubetapaRepository licitacionSubetapaRepository;

    @Autowired
    private LicitacionProveedorRepository licitacionProveedorRepository;

    @Autowired
    private LicitacionProveedorRenegociacionRepository licitacionProveedorRenegociacionRepository;

    @Autowired
    private LicitacionActualizarEtapasNotificacion licitacionActualizarEtapasNotificacion;

    @Autowired
    private LicitacionRepository licitacionRepository;



    @Autowired
    private SystemLoggedUser systemLoggedUser;

    private static final String ETAPA_CREACION = "Creaci贸n";
    private static final String ETAPA_PUBLICACION = "Publicaci贸n";
    private static final String ETAPA_RENEGOCIACION = "Renegociaci贸n";
    SimpleDateFormat ft_diamesanio_time = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");

    /**************************/
    /* Metodos Personalizados */
    /**************************/
    public List<LicitacionSubetapa> obtenerTrazabilidad(Integer idLicitacion) throws Exception {
        List<LicitacionSubetapa> licitacionSubetapaList = new ArrayList<LicitacionSubetapa>();
        List<LicitacionSubetapa> licitacionSubetapaListFinal = new ArrayList<LicitacionSubetapa>();
        Licitacion licitacion = this.licitacionRepository.findById(idLicitacion).get();
        if (!Optional.ofNullable(licitacion).isPresent()) {
            return licitacionSubetapaList;
        }
        licitacionSubetapaList = this.licitacionSubetapaRepository.
                findLicitacionSubetapaByIdLicitacionOrderByFechaCierreSubetapa(licitacion);
        for (LicitacionSubetapa bean:licitacionSubetapaList) {

            bean.setFechaCierreSubetapaString(this.ft_diamesanio_time.format(bean.getFechaCierreSubetapa()));

            licitacionSubetapaListFinal.add(bean);
        }
        return licitacionSubetapaListFinal;
    }

    public List<LicitacionProveedorRenegociacion> obtenerTrazabilidadRenegociacion(Integer idLicitacion) throws Exception {
        List<LicitacionProveedorRenegociacion> listaRenegociacion = new ArrayList<LicitacionProveedorRenegociacion>();
        Licitacion licitacion = this.licitacionRepository.findById(idLicitacion).get();
        if (!Optional.ofNullable(licitacion).isPresent()) {
            return listaRenegociacion;
        }
        listaRenegociacion = this.licitacionProveedorRenegociacionRepository.
                findByLicitacionOrderByProveedorFechaCierreRecepcion(idLicitacion);
        return listaRenegociacion;

    }


    public void enviarCorreoActualizarEtapas(List<LicitacionSubetapa> result) {
        UserSession userSession = this.systemLoggedUser.getUserSession();
        LicitacionSubetapa licitacionSubetapa = result.get(0);
        Licitacion licitacion = licitacionSubetapa.getIdLicitacion();
//        List<LicitacionProveedor> licitacionProveedorList = this.licitacionProveedorRepository.
//                findByLicitacionSiParticipa(licitacion, Constant.S);
        List<LicitacionProveedor> licitacionProveedorList = this.licitacionProveedorRepository.
                findByLicitacion(licitacion);

        String sNroLicitacion = this.getNroLicitacionString(licitacion.getNroLicitacion(), licitacion.getAnioLicitacion());
        licitacion.setNroLicitacionString(sNroLicitacion);

        for(LicitacionSubetapa bean : result) {
            Date fechaCierre = bean.getFechaCierreSubetapa();
            String sFechaCierre = DateUtils.convertDateToString("dd/MM/yyyy HH:mm:ss", fechaCierre);
            bean.setFechaCierreSubetapaString(sFechaCierre);
        }

        for (LicitacionProveedor licitacionProveedor : licitacionProveedorList) {
            Proveedor proveedor = licitacionProveedor.getProveedor();
            this.licitacionActualizarEtapasNotificacion.enviar(
                    parametroMapper.getMailSetting(),
                    proveedor,
                    licitacion,
                    result,
                    null,
                    userSession.getDisplayName(),
                    userSession.getMail());
        }
    }

    public List<LicitacionSubetapa> grabarLista(List<LicitacionSubetapa> licitacionSubetapaList) throws Exception{
        if (licitacionSubetapaList == null || licitacionSubetapaList.size() <= 0) {
            throw new PortalException("No existen registros correspondiente a las Etapas de la Licitaci贸n");
        }

        List<LicitacionSubetapa> sortedListSubEtapa = licitacionSubetapaList.stream()
                .sorted(Comparator.comparing(LicitacionSubetapa::getFechaCierreSubetapa))
                .collect(Collectors.toList());
        boolean verificar = false;
        Date fechaActual = DateUtils.obtenerFechaHoraActual();
        for(LicitacionSubetapa bean : sortedListSubEtapa) {
            Date fechaCierre = bean.getFechaCierreSubetapa();
            if (fechaCierre.compareTo(fechaActual) >= 0) {
                verificar = true;
            }
        }
        if (!verificar) {
            throw new PortalException("Debe existir al menos una Etapa con Fecha de Cierre mayor a la Fecha Actual del Sistema");
        }
        int longitudListaEtapa = sortedListSubEtapa.size() ;
        LicitacionSubetapa licitacionSubetapaFinal = sortedListSubEtapa.get(longitudListaEtapa - 1);
        Integer idLicitacion = licitacionSubetapaList.get(0).getIdLicitacion().getIdLicitacion();

        List<LicitacionSubetapa> licitacionSubetapaListFinal=new ArrayList<>();
        for(LicitacionSubetapa bean : sortedListSubEtapa) {
            bean.setFechaCierreSubetapa(this.convertToTimestamp(bean.getFechaCierreSubetapaString(),true));
            licitacionSubetapaListFinal.add(bean);
        }

        this.licitacionSubetapaRepository.deleteDetailByLicitacion(idLicitacion);
        this.licitacionSubetapaRepository.saveAll(licitacionSubetapaListFinal);

        /* Actualizando fechas en las demas tablas */
        Licitacion licitacion = this.licitacionRepository.getOne(idLicitacion);
        int tamanno = licitacionSubetapaListFinal.size() - 1;
        int contador = 0;
        for(LicitacionSubetapa bean : licitacionSubetapaListFinal) {
            Date fechaRecepcionOferta = bean.getFechaCierreSubetapa();
            if (contador == 0) {
                licitacion.setFechaCierreConfirmacionParticipacion(new Timestamp(fechaRecepcionOferta.getTime()));
            }
            if (contador == tamanno - 1) {
                licitacion.setFechaInicioRecepcionOferta(new Timestamp(fechaRecepcionOferta.getTime()));
            }
            if (bean.getIdSubetapa().getIndRecepcionConsulta().equals(Constant.UNO)) {
                licitacion.setFechaCierreConsultaPregunta(new Timestamp(fechaRecepcionOferta.getTime()));
            }

            if (bean.getIdSubetapa().getIndRenegociacion().equals(Constant.UNO)) {
                licitacion.setFechaCierreRecepcionOferta(new Timestamp(fechaRecepcionOferta.getTime()));
                Date fechaUltimaRenegociacion = fechaRecepcionOferta;

                /* Actualizando Fecha Cierre en LicitacionProveedor */
                List<LicitacionProveedor> licitacionProveedorList = this.licitacionProveedorRepository.findByLicitacion(licitacion);
                for (LicitacionProveedor beanLicitacionProveedor : licitacionProveedorList) {
                    Integer contadorRenegociacion = this.licitacionProveedorRenegociacionRepository.
                            countByLicitacionAndProveedor(
                                    beanLicitacionProveedor.getLicitacion().getIdLicitacion(),
                                    beanLicitacionProveedor.getProveedor().getIdProveedor()
                            );
                    if (contadorRenegociacion.intValue() <= 0) {
                        beanLicitacionProveedor.setFechaCierreRecepcion(fechaUltimaRenegociacion);
                    }
                    else {
                        if (beanLicitacionProveedor.getFechaCierreRecepcion().before(fechaUltimaRenegociacion)) {
                            beanLicitacionProveedor.setFechaCierreRecepcion(fechaUltimaRenegociacion);
                        }
                    }
                    this.licitacionProveedorRepository.save(beanLicitacionProveedor);
                }

                /* Actualizando fechaUltimaRenegociacion en Licitacion */
                licitacion.setFechaUltimaRenegociacion(new Timestamp(fechaUltimaRenegociacion.getTime()));
                for (LicitacionProveedor beanLicitacionProveedor : licitacionProveedorList) {
                    if (beanLicitacionProveedor.getFechaCierreRecepcion().after(fechaUltimaRenegociacion)) {
                        fechaUltimaRenegociacion = beanLicitacionProveedor.getFechaCierreRecepcion();
                        licitacion.setFechaUltimaRenegociacion(new Timestamp(fechaUltimaRenegociacion.getTime()));
                    }
                }

            }
            contador++;
        }
        this.licitacionRepository.save(licitacion);
        List<LicitacionSubetapa> listaFinal = this.licitacionSubetapaRepository.
                findLicitacionSubetapaByIdLicitacionOrderByFechaCierreSubetapa(licitacion);
        return listaFinal;
    }

    public void enviarCorreoRecordatorio() {
        String estadoLicitacion = EstadoLicitacionEnum.PENDIENTE_RESPUESTA.getCodigo();
        Date fechaActual = DateUtils.obtenerFechaActual();
        Date fechaActualMasUno = DateUtils.sumarRestarDias(fechaActual, 2);
        List<LicitacionSubetapa> licitacionSubetapaList = this.licitacionSubetapaRepository.
                getListaEnviarCorreoRecordatorio(estadoLicitacion, fechaActualMasUno);
        log.error("enviarCorreoRecordatorio size licitacionSubetapaList: "+ licitacionSubetapaList.size());

        for (LicitacionSubetapa bean:licitacionSubetapaList) {
            Date fechaCierre = bean.getFechaCierreSubetapa();
            String fechaCierreString = DateUtils.convertDateToString("dd/MM/yyyy HH:mm:ss",fechaCierre);
            String descripcionSubEtapa = bean.getIdSubetapa().getDescripcionSubetapa();
            Licitacion licitacion = bean.getIdLicitacion();
            List<LicitacionProveedor> licitacionProveedorList = this.licitacionProveedorRepository.
                    findByLicitacionSiParticipa(licitacion, Constant.S);
            String sNroLicitacion = this.getNroLicitacionString(licitacion.getNroLicitacion(), licitacion.getAnioLicitacion());
            licitacion.setNroLicitacionString(sNroLicitacion);

            log.error("enviarCorreoRecordatorio size licitacionProveedorList: "+ licitacionProveedorList.size());
            for (LicitacionProveedor licitacionProveedor: licitacionProveedorList) {
                Proveedor proveedor = licitacionProveedor.getProveedor();
                log.error("enviarCorreoRecordatorio ENVIANDO proveedor: "+ proveedor.toString());
                this.envioCorreoRecordatorioNotificacion.enviar(parametroMapper.getMailSetting(),
                        proveedor,
                        licitacion,
                        fechaCierreString,
                        descripcionSubEtapa,
                        "JOB",
                        "job@sanfernando.pe");
            }

        }

        for (LicitacionSubetapa bean:licitacionSubetapaList) {
            bean.setIndEnviadoCorreoRecordatorio(Constant.UNO);
            this.licitacionSubetapaRepository.save(bean);
        }

    }

    private String getNroLicitacionString(Integer numero, Integer annio){
        String texto = ("00000000" + numero);
        String nroLicitacionString = annio + texto.substring(texto.length() - 8, texto.length());

        return nroLicitacionString;
    }

    public TrazabilidadRespuestaDto findTrazabilidad(Integer id) throws Exception {
        TrazabilidadRespuestaDto trazabilidadRespuestaDto = new TrazabilidadRespuestaDto();
        Optional<Licitacion> optionalLicitacion = this.licitacionRepository.findById(id);
        if (!Optional.ofNullable(optionalLicitacion.get()).isPresent()) {
            return null;
        }
        Licitacion licitacion = optionalLicitacion.get();
        trazabilidadRespuestaDto.setStartTime(licitacion.getFechaCreacion());
        List<TrazabilidadEtapaRespuestaDto> trazabilidadEtapaRespuestaDtoList = new ArrayList<TrazabilidadEtapaRespuestaDto>();

        /* Etapa de Creaci贸n */
        TrazabilidadEtapaRespuestaDto trazabilidadEtapaRespuestaDto = new TrazabilidadEtapaRespuestaDto();
        trazabilidadEtapaRespuestaDto.setIcon("sap-icon://create-form");
        trazabilidadEtapaRespuestaDto.setDescription(ETAPA_CREACION);

        List<TrazabilidadFechaEtapaRespuestaDto> etapasList = new ArrayList<TrazabilidadFechaEtapaRespuestaDto>();
        TrazabilidadFechaEtapaRespuestaDto etapa = new TrazabilidadFechaEtapaRespuestaDto();
        etapa.setStart(licitacion.getFechaCreacion());
        etapa.setEnd(DateUtils.sumarRestarHoras(licitacion.getFechaCreacion(), 1));
        etapa.setType(TrazabilidadTypeEnum.TYPE_01.getEstado());
        etapa.setTitle(ETAPA_CREACION);
        etapasList.add(etapa);
        trazabilidadEtapaRespuestaDto.setEtapas(etapasList);
        trazabilidadEtapaRespuestaDtoList.add(trazabilidadEtapaRespuestaDto);

        /* Etapa de Publicaci贸n */
        TrazabilidadEtapaRespuestaDto trazabilidadEtapaRespuestaDto01 = new TrazabilidadEtapaRespuestaDto();
        trazabilidadEtapaRespuestaDto01.setIcon("sap-icon://travel-expense-report");
        trazabilidadEtapaRespuestaDto01.setDescription(ETAPA_PUBLICACION);

        List<TrazabilidadFechaEtapaRespuestaDto> etapasList01 = new ArrayList<TrazabilidadFechaEtapaRespuestaDto>();
        TrazabilidadFechaEtapaRespuestaDto etapa01 = new TrazabilidadFechaEtapaRespuestaDto();
        etapa01.setStart(licitacion.getFechaPublicacion());
        etapa01.setEnd(DateUtils.sumarRestarHoras(licitacion.getFechaPublicacion(), 1));
        etapa01.setType(TrazabilidadTypeEnum.TYPE_02.getEstado());
        etapa01.setTitle(ETAPA_PUBLICACION);
        etapasList01.add(etapa01);
        trazabilidadEtapaRespuestaDto01.setEtapas(etapasList01);
        trazabilidadEtapaRespuestaDtoList.add(trazabilidadEtapaRespuestaDto01);

        /* Subetapas */
        List<LicitacionSubetapa> licitacionSubetapaList = this.licitacionSubetapaRepository.
                findLicitacionSubetapaByIdLicitacionOrderByFechaCierreSubetapa(licitacion);
        Date fechaStart = DateUtils.sumarRestarMinutos(licitacion.getFechaPublicacion(), 1);
        for(LicitacionSubetapa bean:licitacionSubetapaList) {
            TrazabilidadEtapaRespuestaDto trazabilidadEtapaRespuestaDtoSub = new TrazabilidadEtapaRespuestaDto();
            trazabilidadEtapaRespuestaDtoSub.setIcon("sap-icon://filter-fields");
            trazabilidadEtapaRespuestaDtoSub.setDescription(bean.getIdSubetapa().getDescripcionSubetapa());

            List<TrazabilidadFechaEtapaRespuestaDto> etapasListSub = new ArrayList<TrazabilidadFechaEtapaRespuestaDto>();
            TrazabilidadFechaEtapaRespuestaDto etapaSub = new TrazabilidadFechaEtapaRespuestaDto();
            etapaSub.setStart(fechaStart);
            etapaSub.setEnd(bean.getFechaCierreSubetapa());
            etapaSub.setType(TrazabilidadTypeEnum.TYPE_03.getEstado());
            etapaSub.setTitle(bean.getIdSubetapa().getDescripcionSubetapa());
            etapasListSub.add(etapaSub);
            trazabilidadEtapaRespuestaDtoSub.setEtapas(etapasListSub);
            trazabilidadEtapaRespuestaDtoList.add(trazabilidadEtapaRespuestaDtoSub);
            fechaStart = DateUtils.sumarRestarMinutos(bean.getFechaCierreSubetapa(), 1);
        }
        trazabilidadRespuestaDto.setEtapas(trazabilidadEtapaRespuestaDtoList);
        return trazabilidadRespuestaDto;
    }

    public  TrazabilidadRespuestaDto findTrazabilidadRenegociacion(Integer id) throws Exception {

        TrazabilidadRespuestaDto trazabilidadRespuestaDto = new TrazabilidadRespuestaDto();
        Optional<Licitacion> optionalLicitacion = this.licitacionRepository.findById(id);
        if (!Optional.ofNullable(optionalLicitacion.get()).isPresent()) {
            return null;
        }
        Licitacion licitacion = optionalLicitacion.get();
        trazabilidadRespuestaDto.setStartTime(licitacion.getFechaPublicacion());
        Date fechaStartIni = DateUtils.sumarRestarMinutos(licitacion.getFechaPublicacion(), 1);
        List<TrazabilidadEtapaRespuestaDto> trazabilidadEtapaRespuestaDtoList = new ArrayList<TrazabilidadEtapaRespuestaDto>();

        List<LicitacionProveedor> licitacionProveedorList = this.licitacionProveedorRepository.findByLicitacion(licitacion);
        for(LicitacionProveedor beanProveedor: licitacionProveedorList) {

            List<LicitacionProveedorRenegociacion> licitacionProveedorRenegociacionList =
                    this.licitacionProveedorRenegociacionRepository.findByLicitacionOrderByFechaCierreRecepcion(
                            licitacion.getIdLicitacion(),
                            beanProveedor.getProveedor().getIdProveedor()
                    );

            int contador = 0;
            Date fechaStart = fechaStartIni;
            TrazabilidadEtapaRespuestaDto trazabilidadEtapaRespuestaDtoSub = new TrazabilidadEtapaRespuestaDto();
            trazabilidadEtapaRespuestaDtoSub.setIcon("sap-icon://employee");
            trazabilidadEtapaRespuestaDtoSub.setDescription(beanProveedor.getProveedor().getRazonSocial());

            List<TrazabilidadFechaEtapaRespuestaDto> etapasListSub = new ArrayList<TrazabilidadFechaEtapaRespuestaDto>();
            for (LicitacionProveedorRenegociacion bean : licitacionProveedorRenegociacionList) {
                contador++;
                TrazabilidadFechaEtapaRespuestaDto etapaSub = new TrazabilidadFechaEtapaRespuestaDto();
                etapaSub.setStart(fechaStart);
                etapaSub.setEnd(bean.getFechaCierreRecepcion());
                etapaSub.setType(TrazabilidadTypeEnum.TYPE_03.getEstado());
                etapaSub.setTitle(ETAPA_RENEGOCIACION + contador);
                etapaSub.setInfo(bean.getMotivoRenegociacion());
                etapasListSub.add(etapaSub);

                fechaStart = DateUtils.sumarRestarMinutos(bean.getFechaCierreRecepcion(), 1);
            }
            trazabilidadEtapaRespuestaDtoSub.setEtapas(etapasListSub);
            trazabilidadEtapaRespuestaDtoList.add(trazabilidadEtapaRespuestaDtoSub);
        }

        trazabilidadRespuestaDto.setEtapas(trazabilidadEtapaRespuestaDtoList);
        return trazabilidadRespuestaDto;
    }
    public Timestamp convertToTimestamp(String strFecha, Boolean indTime){
        if (StringUtils.isBlank(strFecha))
            return null;
        Timestamp timeStampDate=null;
        DateFormat formatter;

        if (indTime) {
            formatter = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");
        }else{
            formatter = new SimpleDateFormat("dd/MM/yyyy");
        }

        Date date = null;
        try {
            date = (Date) formatter.parse(strFecha);
        } catch (ParseException e) {
            e.printStackTrace();
        }
        timeStampDate = new Timestamp(date.getTime());

        return timeStampDate;
    }

    /**************************/
    /* Metodos Generados      */
    /**************************/

    protected Sort setFindAll(Sort sort) {
        return sort;
    }

    protected Sort setFind(LicitacionSubetapa req, ExampleMatcher matcher, Example<LicitacionSubetapa> example, Sort sort) {
        return sort;
    }

    protected void setFindPaginated(PageRequestByExample<LicitacionSubetapa> req, ExampleMatcher matcher, Example<LicitacionSubetapa> example) {
        return;
    }

    protected void setCreate(LicitacionSubetapa dto) {

    }

    protected void setSave(LicitacionSubetapa dto) {

    }

    protected void setDelete(Integer id) {

    }

    protected void setDeleteAll() {

    }

}