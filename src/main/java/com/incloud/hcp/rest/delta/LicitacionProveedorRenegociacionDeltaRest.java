/*
 * Project home: https://github.com/jaxio/celerio-angular-quickstart
 * 
 * Source code generated by Celerio, an Open Source code generator by Jaxio.
 * Documentation: http://www.jaxio.com/documentation/celerio/
 * Source code: https://github.com/jaxio/celerio/
 * Follow us on twitter: @jaxiosoft
 * This header can be customized in Celerio conf...
 * Template pack-angular:src/main/java/rest/EntitydeltaResource.java.e.vm
 */
package com.incloud.hcp.rest.delta;

import com.incloud.hcp.config.BindingErrorsResponse;
import com.incloud.hcp.domain.LicitacionProveedorRenegociacion;
import com.incloud.hcp.rest.LicitacionProveedorRenegociacionRest;
import com.incloud.hcp.util.Utils;
import io.swagger.annotations.ApiOperation;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import javax.validation.Valid;
import java.net.URISyntaxException;
import java.util.Optional;

import static org.springframework.http.MediaType.APPLICATION_JSON_VALUE;

@RestController
@RequestMapping("/api/licitacionProveedorRenegociacion")
public class LicitacionProveedorRenegociacionDeltaRest extends LicitacionProveedorRenegociacionRest {

    private final Logger log = LoggerFactory.getLogger(LicitacionProveedorRenegociacionDeltaRest.class);

    /**
     * Update or created LicitacionProveedorRenegociacion.
     */
    @ApiOperation(value = "Crea registro de tipo LicitacionProveedorRenegociacion", produces = "application/json")
    @PostMapping(value = "/grabarRegistroRenegociacion", produces = APPLICATION_JSON_VALUE)
    public ResponseEntity<LicitacionProveedorRenegociacion> grabarRegistroRenegociacion(
            @RequestBody @Valid LicitacionProveedorRenegociacion licitacionProveedorRenegociacion,
            BindingResult bindingResult) throws URISyntaxException {
        log.error("Ingresando grabarRegistroRenegociacion 00 LicitacionProveedorRenegociacion: " + licitacionProveedorRenegociacion.toString());
        BindingErrorsResponse errors = new BindingErrorsResponse();
        HttpHeaders headers = new HttpHeaders();
        if (bindingResult.hasErrors()) {
            errors.addAllErrors(bindingResult);
            throw new RuntimeException(errors.toJSON());
        }
        log.error("Ingresando grabarRegistroRenegociacion : 01 " +  licitacionProveedorRenegociacion.toString());
        try {
            LicitacionProveedorRenegociacion result = this.licitacionProveedorRenegociacionDeltaService.
                    grabarRegistroRenegociacion(licitacionProveedorRenegociacion);
            this.licitacionProveedorRenegociacionDeltaService.
                    enviarCorreoRegistroRenegociacion(result);
            return Optional.of(result).map(l -> new ResponseEntity<>(l, HttpStatus.OK)).orElse(new ResponseEntity<>(HttpStatus.NO_CONTENT));
        } catch (Exception e) {
            String error = Utils.obtieneMensajeErrorException(e);
            throw new RuntimeException(error);
        }
    }

}