/*
 * Project home: https://github.com/jaxio/celerio-angular-quickstart
 * 
 * Source code generated by Celerio, an Open Source code generator by Jaxio.
 * Documentation: http://www.jaxio.com/documentation/celerio/
 * Source code: https://github.com/jaxio/celerio/
 * Follow us on twitter: @jaxiosoft
 * This header can be customized in Celerio conf...
 * Template pack-angular:src/main/java/rest/EntitydeltaResource.java.e.vm
 */
package com.incloud.hcp.rest.delta;

import com.incloud.hcp.bean.UserSession;
import com.incloud.hcp.domain.LineaComercial;
import com.incloud.hcp.domain.Usuario;
import com.incloud.hcp.domain.UsuarioLineaComercial;
import com.incloud.hcp.dto.UsuarioLineaComercialDto;
import com.incloud.hcp.rest.UsuarioLineaComercialRest;
import com.incloud.hcp.util.Utils;
import io.swagger.annotations.ApiOperation;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.net.URISyntaxException;
import java.util.List;
import java.util.Optional;

import static org.springframework.http.MediaType.APPLICATION_JSON_VALUE;

@RestController
@RequestMapping("/api/usuarioLineaComercial")
public class UsuarioLineaComercialDeltaRest extends UsuarioLineaComercialRest {

    private final Logger log = LoggerFactory.getLogger(UsuarioLineaComercialDeltaRest.class);


    @ApiOperation(value = "Busca registro de tipo UsuarioLineaComercial en base al id del Usuario", produces = "application/json")
    @GetMapping(value = "/findByIdUsuario/{idUsuario}", produces = APPLICATION_JSON_VALUE)
    public ResponseEntity<List<UsuarioLineaComercial>> findByIdUsuario(@PathVariable Integer idUsuario) throws URISyntaxException {
        log.debug("Find by id UsuarioLineaComercial : {}", idUsuario);
        try {
            UsuarioLineaComercial usuarioLineaComercial = new UsuarioLineaComercial();
            Usuario usuario = new Usuario();
            usuario.setIdUsuario(idUsuario);
            usuarioLineaComercial.setIdUsuario(usuario);
            return Optional.ofNullable(this.usuarioLineaComercialDeltaService.find(usuarioLineaComercial))
                    .map(l -> new ResponseEntity<>(l, HttpStatus.OK))
                    .orElse(new ResponseEntity<>(HttpStatus.NOT_FOUND));
        } catch (Exception e) {
            String error = Utils.obtieneMensajeErrorException(e);
            throw new RuntimeException(error);
        }
    }

    @ApiOperation(value = "Modifica o crea registro de tipo UsuarioLineaComercial en base a una Lista", produces = "application/json")
    @PostMapping(value = "/grabarLista", produces = APPLICATION_JSON_VALUE)
    public ResponseEntity<List<UsuarioLineaComercial>> grabarLista(
            @RequestBody UsuarioLineaComercialDto usuarioLineaComercialDto)
            throws URISyntaxException {

        log.debug("Ingresando grabarLista UsuarioLineaComercialRest : {}", usuarioLineaComercialDto.toString());
        try {
            List<UsuarioLineaComercial> result = this.usuarioLineaComercialDeltaService.grabarLista(usuarioLineaComercialDto);
            return Optional.of(result).map(l -> new ResponseEntity<>(l, HttpStatus.OK)).orElse(new ResponseEntity<>(HttpStatus.NO_CONTENT));
        } catch (Exception e) {
            String error = Utils.obtieneMensajeErrorException(e);
            throw new RuntimeException(error);
        }
    }


    @ApiOperation(value = "Devuelve lista de lineas comerciales del usuario logueado", produces = "application/json")
    @GetMapping(value = "/_devuelveLineaComercial", produces = APPLICATION_JSON_VALUE)
    public ResponseEntity<List<LineaComercial>> _devuelveLineaComercial() throws URISyntaxException {
        log.debug("Ingresando _devuelveLineaComercial");
        try {
            UserSession userSession = this.getUserSession();
            return Optional.of(this.usuarioLineaComercialDeltaService.
                    devuelveLineaComercial(userSession)).map(l -> new ResponseEntity<>(l, HttpStatus.OK))
                    .orElse(new ResponseEntity<>(HttpStatus.NO_CONTENT));
        } catch (Exception e) {
            String error = Utils.obtieneMensajeErrorException(e);
            throw new RuntimeException(error);
        }
    }

    @ApiOperation(value = "Devuelve si el usuario logueado posee Grupo Comercial", produces = "application/json")
    @GetMapping(value = "/_verificaLineaComercial", produces = APPLICATION_JSON_VALUE)
    public ResponseEntity<String> verificaLineaComercial() throws URISyntaxException {
        log.debug("Ingresando _verificaLineaComercial");
        try {
            UserSession userSession = this.getUserSession();
            return Optional.of(this.usuarioLineaComercialDeltaService.
                    verificaLineaComercial(userSession)).map(l -> new ResponseEntity<>(l, HttpStatus.OK))
                    .orElse(new ResponseEntity<>(HttpStatus.NO_CONTENT));
        } catch (Exception e) {
            String error = Utils.obtieneMensajeErrorException(e);
            throw new RuntimeException(error);
        }
    }

}