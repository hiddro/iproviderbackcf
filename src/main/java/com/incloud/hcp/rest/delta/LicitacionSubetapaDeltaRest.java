/*
 * Project home: https://github.com/jaxio/celerio-angular-quickstart
 * 
 * Source code generated by Celerio, an Open Source code generator by Jaxio.
 * Documentation: http://www.jaxio.com/documentation/celerio/
 * Source code: https://github.com/jaxio/celerio/
 * Follow us on twitter: @jaxiosoft
 * This header can be customized in Celerio conf...
 * Template pack-angular:src/main/java/rest/EntitydeltaResource.java.e.vm
 */
package com.incloud.hcp.rest.delta;

import com.incloud.hcp.config.BindingErrorsResponse;
import com.incloud.hcp.domain.LicitacionProveedorRenegociacion;
import com.incloud.hcp.domain.LicitacionSubetapa;
import com.incloud.hcp.dto.TrazabilidadRespuestaDto;
import com.incloud.hcp.rest.LicitacionSubetapaRest;
import com.incloud.hcp.util.Utils;
import io.swagger.annotations.ApiOperation;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.*;

import javax.validation.Valid;
import java.net.URISyntaxException;
import java.util.List;
import java.util.Optional;

import static org.springframework.http.MediaType.APPLICATION_JSON_VALUE;

@RestController
@RequestMapping("/api/licitacionSubetapa")
public class LicitacionSubetapaDeltaRest extends LicitacionSubetapaRest {

    private final Logger log = LoggerFactory.getLogger(LicitacionSubetapaDeltaRest.class);

    @ApiOperation(value = "Crea registro de tipo LicitacionSubetapa en base a Lista", produces = "application/json")
    @PostMapping(value = "/grabarLista", produces = APPLICATION_JSON_VALUE)
    public ResponseEntity<List<LicitacionSubetapa>> grabarLista(
            @RequestBody @Valid List<LicitacionSubetapa> licitacionSubetapaList,
            BindingResult bindingResult) {
        BindingErrorsResponse errors = new BindingErrorsResponse();
        if (bindingResult.hasErrors()) {
            errors.addAllErrors(bindingResult);
            throw new RuntimeException(errors.toJSON());
        }
        log.debug("Ingresando grabarLista : {}", licitacionSubetapaList);
        try {
            List<LicitacionSubetapa> result = this.licitacionSubetapaDeltaService.grabarLista(licitacionSubetapaList);
            this.licitacionSubetapaDeltaService.
                    enviarCorreoActualizarEtapas(result);
            return Optional.of(result).map(l -> new ResponseEntity<>(l, HttpStatus.OK)).orElse(new ResponseEntity<>(HttpStatus.NO_CONTENT));
        } catch (Exception e) {
            String error = Utils.obtieneMensajeErrorException(e);
            throw new RuntimeException(error);
        }
    }

    @ApiOperation(value = "Busca lista de tipo TrazabilidadRespuestaDto para la trazabilidad", produces = "application/json")
    @GetMapping(value = "/_findTrazabilidad/{id}", produces = APPLICATION_JSON_VALUE)
    public ResponseEntity<TrazabilidadRespuestaDto> findTrazabilidad(@PathVariable Integer id) throws URISyntaxException {
        log.debug("Find by id trazabilidad : {}", id);
        try {
            TrazabilidadRespuestaDto result = this.licitacionSubetapaDeltaService.findTrazabilidad(id);
            return Optional.ofNullable(result)
                    .map(licitacionSubetapa -> new ResponseEntity<>(licitacionSubetapa, HttpStatus.OK)).orElse(new ResponseEntity<>(HttpStatus.NOT_FOUND));
        } catch (Exception e) {
            String error = Utils.obtieneMensajeErrorException(e);
            throw new RuntimeException(error);
        }
    }

    @ApiOperation(value = "Busca lista de tipo TrazabilidadRespuestaDto para la trazabilidad en detalle", produces = "application/json")
    @GetMapping(value = "/_findTrazabilidadRenegociacion/{id}", produces = APPLICATION_JSON_VALUE)
    public ResponseEntity<TrazabilidadRespuestaDto> findTrazabilidadRenegociacion(@PathVariable Integer id) throws URISyntaxException {
        log.debug("Find by id trazabilidad : {}", id);
        try {
            TrazabilidadRespuestaDto result = this.licitacionSubetapaDeltaService.findTrazabilidadRenegociacion(id);
            return Optional.ofNullable(result)
                    .map(licitacionSubetapa -> new ResponseEntity<>(licitacionSubetapa, HttpStatus.OK)).orElse(new ResponseEntity<>(HttpStatus.NOT_FOUND));
        } catch (Exception e) {
            String error = Utils.obtieneMensajeErrorException(e);
            throw new RuntimeException(error);
        }
    }

    @ApiOperation(value = "Busca lista de tipo LicitacionSubetapa para la trazabilidad ", produces = "application/json")
    @GetMapping(value = "/_obtenerTrazabilidad/{idLicitacion}", produces = APPLICATION_JSON_VALUE)
    public ResponseEntity<List<LicitacionSubetapa>> obtenerTrazabilidad(@PathVariable Integer idLicitacion) throws URISyntaxException {
        log.debug("Find by id obtenerTrazabilidad : {}", idLicitacion);
        try {
            List<LicitacionSubetapa> result = this.licitacionSubetapaDeltaService.obtenerTrazabilidad(idLicitacion);
            return Optional.ofNullable(result)
                    .map(licitacionSubetapa -> new ResponseEntity<>(licitacionSubetapa, HttpStatus.OK)).orElse(new ResponseEntity<>(HttpStatus.NOT_FOUND));
        } catch (Exception e) {
            String error = Utils.obtieneMensajeErrorException(e);
            throw new RuntimeException(error);
        }
    }

    @ApiOperation(value = "Busca lista de tipo LicitacionProveedorRenegociacion para la trazabilidad (Renegociacion)", produces = "application/json")
    @GetMapping(value = "/_obtenerTrazabilidadRenegociacion/{idLicitacion}", produces = APPLICATION_JSON_VALUE)
    public ResponseEntity<List<LicitacionProveedorRenegociacion>> obtenerTrazabilidadRenegociacion(@PathVariable Integer idLicitacion) throws URISyntaxException {
        log.debug("Find by id obtenerTrazabilidadRenegociacion : {}", idLicitacion);
        try {
            List<LicitacionProveedorRenegociacion> result = this.licitacionSubetapaDeltaService.
                    obtenerTrazabilidadRenegociacion(idLicitacion);
            return Optional.ofNullable(result)
                    .map(licitacionSubetapa -> new ResponseEntity<>(licitacionSubetapa, HttpStatus.OK)).orElse(new ResponseEntity<>(HttpStatus.NOT_FOUND));
        } catch (Exception e) {
            String error = Utils.obtieneMensajeErrorException(e);
            throw new RuntimeException(error);
        }
    }

}