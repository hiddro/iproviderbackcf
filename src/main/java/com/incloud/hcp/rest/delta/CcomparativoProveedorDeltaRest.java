/*
 * Project home: https://github.com/jaxio/celerio-angular-quickstart
 * 
 * Source code generated by Celerio, an Open Source code generator by Jaxio.
 * Documentation: http://www.jaxio.com/documentation/celerio/
 * Source code: https://github.com/jaxio/celerio/
 * Follow us on twitter: @jaxiosoft
 * This header can be customized in Celerio conf...
 * Template pack-angular:src/main/java/rest/EntitydeltaResource.java.e.vm
 */
package com.incloud.hcp.rest.delta;

import com.incloud.hcp.domain.CcomparativoProveedor;
import com.incloud.hcp.rest.CcomparativoProveedorRest;
import com.incloud.hcp.util.Utils;
import io.swagger.annotations.ApiOperation;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import java.net.URISyntaxException;
import java.util.List;
import java.util.Optional;

import static org.springframework.http.MediaType.APPLICATION_JSON_VALUE;

@RestController
@RequestMapping("/api/ccomparativoProveedor")
public class CcomparativoProveedorDeltaRest extends CcomparativoProveedorRest {

    private final Logger log = LoggerFactory.getLogger(CcomparativoProveedorDeltaRest.class);

    /**
     * Find by id CcomparativoProveedor.
     */
    @ApiOperation(value = "Busca registro de tipo CcomparativoProveedor en base al ID de Licitaci√≥n", produces = "application/json")
    @GetMapping(value = "/findByLicitacion/{idLicitacion}", produces = APPLICATION_JSON_VALUE)
    public ResponseEntity<List<CcomparativoProveedor>> findByLicitacion(@PathVariable Integer idLicitacion) throws URISyntaxException {
        log.debug("findByLicitacion CcomparativoProveedor : {}", idLicitacion);
        try {
            return Optional.ofNullable(this.ccomparativoProveedorRepository.findByLicitacionOrdenado(idLicitacion))
                    .map(ccomparativoProveedor -> new ResponseEntity<>(ccomparativoProveedor, HttpStatus.OK))
                    .orElse(new ResponseEntity<>(HttpStatus.NOT_FOUND));
        } catch (Exception e) {
            String error = Utils.obtieneMensajeErrorException(e);
            throw new RuntimeException(error);
        }
    }

}