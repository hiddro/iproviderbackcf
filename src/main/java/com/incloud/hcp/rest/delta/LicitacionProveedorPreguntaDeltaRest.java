/*
 * Project home: https://github.com/jaxio/celerio-angular-quickstart
 * 
 * Source code generated by Celerio, an Open Source code generator by Jaxio.
 * Documentation: http://www.jaxio.com/documentation/celerio/
 * Source code: https://github.com/jaxio/celerio/
 * Follow us on twitter: @jaxiosoft
 * This header can be customized in Celerio conf...
 * Template pack-angular:src/main/java/rest/EntitydeltaResource.java.e.vm
 */
package com.incloud.hcp.rest.delta;

import com.incloud.hcp.config.BindingErrorsResponse;
import com.incloud.hcp.config.excel.ExcelType;
import com.incloud.hcp.domain.LicitacionProveedorPregunta;
import com.incloud.hcp.rest.LicitacionProveedorPreguntaRest;
import com.incloud.hcp.util.Utils;
import io.swagger.annotations.ApiOperation;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.xssf.streaming.SXSSFWorkbook;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.*;

import javax.servlet.ServletOutputStream;
import javax.servlet.http.HttpServletResponse;
import javax.validation.Valid;
import java.io.ByteArrayOutputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.OutputStream;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.Optional;

import static org.springframework.http.MediaType.APPLICATION_JSON_VALUE;

@RestController
@RequestMapping("/api/licitacionProveedorPregunta")
public class LicitacionProveedorPreguntaDeltaRest extends LicitacionProveedorPreguntaRest {

    /**
     * Create a new LicitacionProveedorPregunta.
     */
    @ApiOperation(value = "Crea un registro de tipo LicitacionProveedorPregunta en base a una Lista", produces = "application/json")
    @PostMapping(value = "/grabar", produces = APPLICATION_JSON_VALUE)
    public ResponseEntity<List<LicitacionProveedorPregunta>> grabar(
            @RequestBody @Valid List<LicitacionProveedorPregunta> licitacionProveedorPreguntaList,
            BindingResult bindingResult)  {
        BindingErrorsResponse errors = new BindingErrorsResponse();
        HttpHeaders headers = new HttpHeaders();
        if (bindingResult.hasErrors()) {
            errors.addAllErrors(bindingResult);
            throw new RuntimeException(errors.toJSON());
        }
        log.debug("Ingresando grabar LicitacionProveedorPreguntaRest : {}", licitacionProveedorPreguntaList);
        try {
            List<LicitacionProveedorPregunta> result = this.licitacionProveedorPreguntaDeltaService.grabar(licitacionProveedorPreguntaList);
            this.licitacionProveedorPreguntaDeltaService.enviarCorreoPreguntaLicitacion(result);

            return Optional.of(result).map(l -> new ResponseEntity<>(l, HttpStatus.OK)).orElse(new ResponseEntity<>(HttpStatus.NO_CONTENT));
        } catch (Exception e) {
            String error = Utils.obtieneMensajeErrorException(e);
            throw new RuntimeException(error);
        }
    }

    @ApiOperation(value = "Genera Excel XLSX de registros de tipo LicitacionProveedorPregunta en base al ID de Licitacion", produces = "application/vnd.ms-excel")
    @GetMapping(value = "/downloadCompleteExcelLicitacion/{idLicitacion}", produces = { MediaType.APPLICATION_OCTET_STREAM_VALUE })
    public ResponseEntity<?> downloadCompleteExcelLicitacion(
            @PathVariable Integer idLicitacion, HttpServletResponse response) {
        LicitacionProveedorPregunta bean = new LicitacionProveedorPregunta();
        bean.setIdLicitacion(idLicitacion);
        log.debug("Ingresando downloadCompleteExcelLicitacion by LicitacionProveedorPregunta : {}", bean);
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd_hh_mm_ss");
        String excelFileName = "LicitacionProveedorPregunta_" + formatter.format(LocalDateTime.now()) + ".xlsx";
        SXSSFWorkbook book = this.licitacionProveedorPreguntaDeltaService.downloadExcelSXLSXLicitacion(bean);

        try {
            ByteArrayOutputStream outByteStream = new ByteArrayOutputStream();
            book.write(outByteStream);
            byte[] outArray = outByteStream.toByteArray();
            //response.setContentType("application/vnd.openxmlformats-officedocument.spreadsheetml.sheet");
            response.setContentType(ExcelType.XLSX.getExtension());
            response.setContentLength(outArray.length);
            response.setHeader("Expires:", "0"); // eliminates browser caching
            response.setHeader("Content-Disposition", "attachment; filename=" + excelFileName);
            OutputStream outStream = response.getOutputStream();
            outStream.write(outArray);
            outStream.flush();

            book.dispose();
            book.close();
        } catch (FileNotFoundException e) {
            String error = Utils.obtieneMensajeErrorException(e);
            e.printStackTrace();
            throw new RuntimeException(error);
        } catch (IOException e) {
            String error = Utils.obtieneMensajeErrorException(e);
            e.printStackTrace();
            throw new RuntimeException(error);
        }
        return new ResponseEntity<>(HttpStatus.OK);
    }


    @GetMapping(value = "/downloadExcelbyLicitacion/{idLicitacion}")
    public void getSeguimientoDownload(@PathVariable Integer idLicitacion,HttpServletResponse response) {


        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd_hh_mm_ss");
        String fileName = "PreguntasLicitacion_" + idLicitacion +"_" + formatter.format(LocalDateTime.now()) + ".xlsx";

        String titulo = "";

        List<Map<String, Object>> dataCabecera = new ArrayList<>();

        try {
            Map<String, Object> data = this.licitacionProveedorPreguntaDeltaService.downloadExcel(idLicitacion);
            //Map<String, Object> data2 = this.licitacionProveedorPreguntaDeltaService.downloadExcelPrueba(idLicitacion);
            Workbook workbook = this.exportDataService.mapToWorkbook(titulo,data);
            //this.exportDataService.addSheet(workbook,data2);
            ByteArrayOutputStream baos = new ByteArrayOutputStream();
            workbook.write(baos);

            response.setContentLength(baos.size());
            response.setContentType(ExcelType.XLSX.getExtension());
            response.setHeader("Content-Disposition", "attachment; filename=" + fileName);

            ServletOutputStream out = response.getOutputStream();
            workbook.write(out);

            out.flush();
            baos.flush();
        } catch (IOException e) {
            log.error(e.getMessage(), e.getCause());
            throw new RuntimeException("Error al exportar");
        }
    }
}